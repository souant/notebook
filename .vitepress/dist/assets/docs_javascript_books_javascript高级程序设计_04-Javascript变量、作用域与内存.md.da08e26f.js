import{_ as i,o as t,c as a,d as e}from"./app.fcfc8c55.js";const v=JSON.parse('{"title":"04-Javascript变量、作用域与内存","description":"04-Javascript变量、作用域与内存","frontmatter":{"lang":"zh-CN","title":"04-Javascript变量、作用域与内存","description":"04-Javascript变量、作用域与内存"},"headers":[{"level":2,"title":"执行上下文与作用域","slug":"执行上下文与作用域","link":"#执行上下文与作用域","children":[{"level":3,"title":"块级作用域","slug":"块级作用域","link":"#块级作用域","children":[]}]},{"level":2,"title":"js 内存回收","slug":"js-内存回收","link":"#js-内存回收","children":[]}],"relativePath":"docs/javascript/books/javascript高级程序设计/04-Javascript变量、作用域与内存.md"}'),l={name:"docs/javascript/books/javascript高级程序设计/04-Javascript变量、作用域与内存.md"},s=e('<h1 id="变量、作用域与内存" tabindex="-1">变量、作用域与内存 <a class="header-anchor" href="#变量、作用域与内存" aria-hidden="true">#</a></h1><p>javascript 变量是松散类型的，可以存储任意 js 类型，也即<strong>弱类型</strong></p><p>变量值分为两种，<strong>原始值</strong>与<strong>引用值</strong>，原始值即 js 的 7 种基础类型的值</p><ul><li>原始值存在栈内存中</li><li>引用值存在堆内存中 <ul><li>引用值变量，在内存中存的是该对象的内存指针（内存地址）</li></ul></li></ul><h2 id="执行上下文与作用域" tabindex="-1">执行上下文与作用域 <a class="header-anchor" href="#执行上下文与作用域" aria-hidden="true">#</a></h2><ol><li>全局上下文</li><li>函数上下文</li><li>块级上下文</li></ol><ul><li><p><strong>变量对象</strong>（variable object）每个上下文都有一个关联的变量对象，而这个上下文中定义的所有变量和函数都存在于这个对象上, <strong>无法通过代码访问</strong></p></li><li><p><strong>作用域链</strong>（scope chain）。这个作用域链决定了各级上下文中的代码在访问变量和函数时的顺序，<strong>声明时确定</strong></p></li><li><p><strong>this 指针</strong> ，可以简单的理解 this 为调用函数的对象(不准确)，</p><p>具体 this 指向 请看这篇文章分析：<a href="https://github.com/mqyqingfeng/Blog/issues/7" target="_blank" rel="noreferrer">JavaScript 深入之从 ECMAScript 规范解读 this</a></p></li></ul><p>函数执行上下文包括三个重要的元素：</p><ul><li>变量对象（Variable Object，VO）：包含了函数内部的变量和函数声明，一般用活动对象(activation object, AO)来表示变量对象。</li><li>作用域链（Scope Chain）：用于解决变量访问的问题，它是一个由多个执行上下文的变量对象组成的链式结构。</li><li>this 指针：指向函数被调用时的当前对象。</li></ul><h3 id="块级作用域" tabindex="-1">块级作用域 <a class="header-anchor" href="#块级作用域" aria-hidden="true">#</a></h3><p>在使用 <code>var</code> 声明变量时，变量会被自动添加到最接近的上下文</p><p><code>let</code> 关键字跟 <code>var</code> 很相似，但它的作用域是块级的，这也是 JavaScript 中的新概念。块 级作用域由最近的一对包含花括号{}界定</p><p><code>const</code> 声明的变量需要在一开始就被初始化</p><p>但是 Object 对象类型的值可以被改变，可以用 Object.freeze(object)初始化对象，这样对象的值就不会被改变</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>代码执行流每进入一个新上下文，都会创建一个作用域链，用于搜索变量和函数</p></div><h2 id="js-内存回收" tabindex="-1">js 内存回收 <a class="header-anchor" href="#js-内存回收" aria-hidden="true">#</a></h2><p>javascript 执行引擎会自动的内存管理，实现内存分配或资源回收</p><p>资源回收：变量不再被使用，周期性自动执行</p><p>内存垃圾回收策略：</p><ol><li>标记清理 <ul><li>离开作用域的值会被自动标记为可回收，然后在垃圾回收期间被删除</li><li>主流的垃圾回收算法是标记清理，即先给当前不使用的值加上标记，再回来回收它们的内存</li></ul></li><li>引用计数 <ul><li>引用计数是另一种垃圾回收策略，需要记录值被引用了多少次。JavaScript 引擎不再使用这种算法</li><li>引用计数在代码中存在循环引用时会出现问题。</li></ul></li></ol>',20),r=[s];function c(o,p,n,d,h,_){return t(),a("div",null,r)}const g=i(l,[["render",c]]);export{v as __pageData,g as default};
