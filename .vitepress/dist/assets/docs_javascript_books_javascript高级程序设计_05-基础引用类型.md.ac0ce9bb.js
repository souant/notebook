import{_ as t,o as e,c as l,d}from"./app.b44cccc0.js";const x=JSON.parse('{"title":"05-基础引用类型","description":"05-基础引用类型","frontmatter":{"lang":"zh-CN","title":"05-基础引用类型","description":"05-基础引用类型"},"headers":[{"level":2,"title":"Date 日期对象","slug":"date-日期对象","link":"#date-日期对象","children":[{"level":3,"title":"Date 对象获取时间的方法","slug":"date-对象获取时间的方法","link":"#date-对象获取时间的方法","children":[]}]},{"level":2,"title":"RegExp 正则表达式","slug":"regexp-正则表达式","link":"#regexp-正则表达式","children":[]},{"level":2,"title":"原始值包装类型","slug":"原始值包装类型","link":"#原始值包装类型","children":[{"level":3,"title":"Boolean 布尔值","slug":"boolean-布尔值","link":"#boolean-布尔值","children":[]},{"level":3,"title":"Number 数值","slug":"number-数值","link":"#number-数值","children":[]},{"level":3,"title":"String 字符串","slug":"string-字符串","link":"#string-字符串","children":[]},{"level":3,"title":"单例内置对象","slug":"单例内置对象","link":"#单例内置对象","children":[]}]}],"relativePath":"docs/javascript/books/javascript高级程序设计/05-基础引用类型.md"}'),n={name:"docs/javascript/books/javascript高级程序设计/05-基础引用类型.md"},s=d(`<h1 id="基础引用类型" tabindex="-1">基础引用类型 <a class="header-anchor" href="#基础引用类型" aria-hidden="true">#</a></h1><h2 id="date-日期对象" tabindex="-1">Date 日期对象 <a class="header-anchor" href="#date-日期对象" aria-hidden="true">#</a></h2><blockquote><p>Date 可以表示 1970 年 1 月 1 日至 285616 年的日期</p></blockquote><ul><li><code>Date.parese(&#39;日期字符串&#39;)</code>, 返回日期毫秒数 <ul><li>“月/日/年”，如&quot;5/23/2019&quot;；</li><li>“月名 日, 年”，如&quot;May 23, 2019&quot;；</li><li>“周几 月名 日 年 时:分:秒 时区”，如&quot;Tue May 23 2019 00:00:00 GMT-0700&quot;；</li><li>ISO 8601 扩展格式“YYYY-MM-DDTHH:mm:ss.sssZ”，如 2019-05-23T00:00:00（只适用于兼容 ES5 的实现）。</li></ul></li><li><code>Date.UTC(年，月(0-11), 日(1-31), 时(0-23), 分, 秒, 毫秒)</code>，返回毫秒数</li><li><code>Date.now()</code>，返回当前执行时间的毫秒数</li></ul><h3 id="date-对象获取时间的方法" tabindex="-1">Date 对象获取时间的方法 <a class="header-anchor" href="#date-对象获取时间的方法" aria-hidden="true">#</a></h3><table><thead><tr><th>方法</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td>getTime()</td><td style="text-align:center;">返回日期的毫秒表示；与 valueOf()相同</td></tr><tr><td>setTime(milliseconds)</td><td style="text-align:center;">设置日期的毫秒表示，从而修改整个日期</td></tr><tr><td>getFullYear()</td><td style="text-align:center;">返回 4 位数年（即 2019 而不是 19）</td></tr><tr><td>getUTCFullYear()</td><td style="text-align:center;">返回 UTC 日期的 4 位数年</td></tr><tr><td>setFullYear(year)</td><td style="text-align:center;">设置日期的年（year 必须是 4 位数）</td></tr><tr><td>setUTCFullYear(year)</td><td style="text-align:center;">设置 UTC 日期的年（year 必须是 4 位数）</td></tr><tr><td>getMonth()</td><td style="text-align:center;">返回日期的月（0 表示 1 月，11 表示 12 月）</td></tr><tr><td>getUTCMonth()</td><td style="text-align:center;">返回 UTC 日期的月（0 表示 1 月，11 表示 12 月）</td></tr><tr><td>setMonth(month)</td><td style="text-align:center;">设置日期的月（month 为大于 0 的数值，大于 11 加年）</td></tr><tr><td>setUTCMonth(month)</td><td style="text-align:center;">设置 UTC 日期的月（month 为大于 0 的数值，大于 11 加年）</td></tr><tr><td>getDate()</td><td style="text-align:center;">返回日期中的日（1~31）</td></tr><tr><td>getUTCDate()</td><td style="text-align:center;">返回 UTC 日期中的日（1~31）</td></tr><tr><td>setDate(date)</td><td style="text-align:center;">设置日期中的日（如果 date 大于该月天数，则加月）</td></tr><tr><td>setUTCDate(date)</td><td style="text-align:center;">设置 UTC 日期中的日（如果 date 大于该月天数，则加月）</td></tr><tr><td>getDay()</td><td style="text-align:center;">返回日期中表示周几的数值（0 表示周日，6 表示周六）</td></tr><tr><td>getUTCDay()</td><td style="text-align:center;">返回 UTC 日期中表示周几的数值（0 表示周日，6 表示周六）</td></tr><tr><td>getHours()</td><td style="text-align:center;">返回日期中的时（0~23）</td></tr><tr><td>getUTCHours()</td><td style="text-align:center;">返回 UTC 日期中的时（0~23）</td></tr><tr><td>setHours(hours)</td><td style="text-align:center;">设置日期中的时（如果 hours 大于 23，则加日）</td></tr><tr><td>setUTCHours(hours)</td><td style="text-align:center;">设置 UTC 日期中的时（如果 hours 大于 23，则加日）</td></tr><tr><td>getMinutes()</td><td style="text-align:center;">返回日期中的分（0~59）</td></tr><tr><td>getUTCMinutes()</td><td style="text-align:center;">返回 UTC 日期中的分（0~59）</td></tr><tr><td>setMinutes(minutes)</td><td style="text-align:center;">设置日期中的分（如果 minutes 大于 59，则加时）</td></tr><tr><td>setUTCMinutes(minutes)</td><td style="text-align:center;">设置 UTC 日期中的分（如果 minutes 大于 59，则加时）</td></tr><tr><td>getSeconds()</td><td style="text-align:center;">返回日期中的秒（0~59）</td></tr><tr><td>getUTCSeconds()</td><td style="text-align:center;">返回 UTC 日期中的秒（0~59）</td></tr><tr><td>setSeconds(seconds)</td><td style="text-align:center;">设置日期中的秒（如果 seconds 大于 59，则加分）</td></tr><tr><td>setUTCSeconds(seconds)</td><td style="text-align:center;">设置 UTC 日期中的秒（如果 seconds 大于 59，则加分）</td></tr><tr><td>getMilliseconds()</td><td style="text-align:center;">返回日期中的毫秒</td></tr><tr><td>getUTCMilliseconds()</td><td style="text-align:center;">返回 UTC 日期中的毫秒</td></tr><tr><td>setMilliseconds(milliseconds)</td><td style="text-align:center;">设置日期中的毫秒</td></tr><tr><td>setUTCMilliseconds(milliseconds)</td><td style="text-align:center;">设置 UTC 日期中的毫秒</td></tr><tr><td>getTimezoneOffset()</td><td style="text-align:center;">返回以分钟计的 UTC 与本地时区的偏移量</td></tr></tbody></table><h2 id="regexp-正则表达式" tabindex="-1">RegExp 正则表达式 <a class="header-anchor" href="#regexp-正则表达式" aria-hidden="true">#</a></h2><p>通常用简洁方式创建，如 <code>let expression = /pattern/flags</code></p><p>对象模式创建， 如 <code>let expression = new RegExp(pattern, flags)</code></p><p>flags 匹配模式的标记。</p><ul><li>g：全局模式，表示查找字符串的全部内容，而不是找到第一个匹配的内容就结束。</li><li>i：不区分大小写，表示在查找匹配时忽略 pattern 和字符串的大小写。</li><li>m：多行模式，表示查找到一行文本末尾时会继续查找。</li><li>y：粘附模式，表示只查找从 lastIndex 开始及之后的字符串。</li><li>u：Unicode 模式，启用 Unicode 匹配。</li><li>s：dotAll 模式，表示元字符.匹配任何字符（包括\\n 或\\r）。</li></ul><h2 id="原始值包装类型" tabindex="-1">原始值包装类型 <a class="header-anchor" href="#原始值包装类型" aria-hidden="true">#</a></h2><p>Boolean、String、Number，这些都是原始值对应的包装类型，方便对原始值的操作</p><p>当访问某个原始值的方法或属性时，后台都会创建一个相应原始包装类型的对象</p><p>例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> s1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> s2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> s1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">substring</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>具体执行逻辑</p><p>(1) 创建一个 String 类型的实例；</p><p>(2) 调用实例上的特定方法；</p><p>(3) 销毁实例</p><h3 id="boolean-布尔值" tabindex="-1">Boolean 布尔值 <a class="header-anchor" href="#boolean-布尔值" aria-hidden="true">#</a></h3><p>使用<code>new Boolean()</code>会创建一个引用类型对象</p><h3 id="number-数值" tabindex="-1">Number 数值 <a class="header-anchor" href="#number-数值" aria-hidden="true">#</a></h3><p>方法：</p><ul><li><code>number.toFixed(小数位数)</code>, 返回多少小数位的数值</li><li><code>number.toExponential()</code>, 返回科学计数表示的字符串</li><li><code>number.toPrecision(位数)</code>, 根据情况返回最合理的输出结果，可能是固定长度，也可能是科学记数法形式</li><li><code>Number.isInteger(数值)</code>, ES6新增，判断是否保存为整数</li><li><code>Number.isSafeInteger(数值)</code>, 判断数值是否再js数值范围内</li></ul><h3 id="string-字符串" tabindex="-1">String 字符串 <a class="header-anchor" href="#string-字符串" aria-hidden="true">#</a></h3><blockquote><p>JavaScript 字符串使用了两种 Unicode 编码混合的策略：UCS-2 和 UTF-16</p></blockquote><ul><li><code>string.length</code>, 返回字符串的长度，表示字符串包含多少 16 位码元</li><li><code>string.charAt(索引)</code>, 返回指定索引的字符，</li><li><code>string.concat(字符串)</code>，返回拼接后的字符串，一般使用 <code>+</code> 号来拼接</li></ul><p>提取字符串方法</p><ul><li><code>string.slice(startIndex, [endIndex])</code>, 返回一个子串</li><li><code>string.substr(startIndex, [从开始到结束的数量])</code>, 返回一个子串</li><li><code>string.substring(startIndex, [endIndex])</code>, 返回一个子串</li></ul><p>字符串位置方法</p><ul><li><code>string.indexOf(字符串, [开始搜索位置])</code>，返回第一个开始位置索引，没有返回 -1</li><li><code>string.lastIndexOf(字符串, [开始搜索位置])</code>，从后面开始查找返回位置索引，没有返回 -1</li></ul><p>字符串包含方法</p><ul><li><code>string.startWith(字符串, [开始位置])</code>，判断是否字符串开始位置就包含</li><li><code>string.endWith(字符串, [结束位置])</code>，判断是否字符串结束位置包含</li><li><code>string.includes(字符串, [开始位置])</code>，判断是否包含字符串</li></ul><p>字符串去除前后空格方法</p><ul><li><code>string.trim()</code>，删除前、后空格，返回新的字符串</li></ul><p>字符串重复方法</p><ul><li><code>string.repeat(重复次数)</code>，返回重复次数的字符串</li></ul><p>字符串填充方法</p><ul><li><code>string.padStart(填充长度，填充字符)</code>，从开始填充到指定长度</li><li><code>string.padEnd(填充长度，填充字符)</code>，从结束填充到指定长度</li></ul><p>字符串大小写转换方法</p><ul><li><code>string.toLowerCase()</code>， 转为小写</li><li><code>string.toUpperCase()</code>， 转为大写</li></ul><p>字符串模式匹配方法</p><ul><li><code>string.match(regexp)</code>, 返回一个正则匹配后的匹配字符串数组</li></ul><p>字符串生成HTML方法</p><blockquote><p>js早期方法</p></blockquote><h3 id="单例内置对象" tabindex="-1">单例内置对象 <a class="header-anchor" href="#单例内置对象" aria-hidden="true">#</a></h3><ol><li><p>Global 对象是 ECMAScript 中最特别的对象</p><ul><li>URL编码方法</li><li><code>eval()</code>方法，执行 ECMAScript（JavaScript）字符串</li><li>window对象</li></ul></li><li><p>Math 对象，保存数学公式</p></li></ol>`,48),r=[s];function i(a,o,c,p,g,u){return e(),l("div",null,r)}const y=t(n,[["render",i]]);export{x as __pageData,y as default};
