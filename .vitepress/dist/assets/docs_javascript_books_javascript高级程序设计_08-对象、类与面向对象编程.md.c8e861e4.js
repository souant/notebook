import{_ as s,o as a,c as n,d as e}from"./app.19dd14ad.js";const h=JSON.parse('{"title":"对象、类与面向对象编程","description":"","frontmatter":{},"headers":[{"level":2,"title":"对象的属性","slug":"对象的属性","link":"#对象的属性","children":[{"level":3,"title":"1. 数据属性","slug":"_1-数据属性","link":"#_1-数据属性","children":[]},{"level":3,"title":"2. 访问器属性","slug":"_2-访问器属性","link":"#_2-访问器属性","children":[]},{"level":3,"title":"Object 定义多个属性","slug":"object-定义多个属性","link":"#object-定义多个属性","children":[]},{"level":3,"title":"Object读取属性的特性","slug":"object读取属性的特性","link":"#object读取属性的特性","children":[]}]},{"level":2,"title":"对象的创建","slug":"对象的创建","link":"#对象的创建","children":[{"level":3,"title":"1. 工厂模式","slug":"_1-工厂模式","link":"#_1-工厂模式","children":[]},{"level":3,"title":"2. 构造函数模式","slug":"_2-构造函数模式","link":"#_2-构造函数模式","children":[]}]},{"level":2,"title":"原型","slug":"原型","link":"#原型","children":[]},{"level":2,"title":"继承","slug":"继承","link":"#继承","children":[{"level":3,"title":"原型链","slug":"原型链","link":"#原型链","children":[]}]},{"level":2,"title":"类","slug":"类","link":"#类","children":[]}],"relativePath":"docs/javascript/books/javascript高级程序设计/08-对象、类与面向对象编程.md"}'),l={name:"docs/javascript/books/javascript高级程序设计/08-对象、类与面向对象编程.md"},o=e(`<h1 id="对象、类与面向对象编程" tabindex="-1">对象、类与面向对象编程 <a class="header-anchor" href="#对象、类与面向对象编程" aria-hidden="true">#</a></h1><p>ECMA-262 将对象定义为一组属性的无序集合</p><p>通常来说对象 Object 包含<strong>属性</strong>和<strong>方法</strong></p><h2 id="对象的属性" tabindex="-1">对象的属性 <a class="header-anchor" href="#对象的属性" aria-hidden="true">#</a></h2><p>ECMA-262 使用一些内部特性来描述属性的特征，也称<strong>属性的属性</strong></p><p>属性分两种：数据属性和访问器属性</p><h3 id="_1-数据属性" tabindex="-1">1. 数据属性 <a class="header-anchor" href="#_1-数据属性" aria-hidden="true">#</a></h3><ul><li><code>[[Configurable]]</code>：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。 默认情况下，所有直接定义在对象上属性的这个特性都是 true，如前面的例子所示。</li><li><code>[[Enumerable]]</code>：表示属性是否可以通过 for-in 循环返回。默认情况下，所有直接定义在对象上的属性的这个特性都是 true，如前面的例子所示。</li><li><code>[[Writable]]</code>：表示属性的值是否可以被修改。默认情况下，所有直接定义在对象上的属性的这个特性都是 true，如前面的例子所示。</li><li><code>[[Value]]</code>：包含属性实际的值。这就是前面提到的那个读取和写入属性值的位置。这个特性的默认值为 undefined。</li></ul><h3 id="_2-访问器属性" tabindex="-1">2. 访问器属性 <a class="header-anchor" href="#_2-访问器属性" aria-hidden="true">#</a></h3><ul><li><code>[[Configurable]]</code>：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为数据属性。 默认情况下，所有直接定义在对象上的属性的这个特性都是 true。</li><li><code>[[Enumerable]]</code>：表示属性是否可以通过 for-in 循环返回。默认情况下，所有直接定义在对象上的属性的这个特性都是 true。</li><li><code>[[Get]]</code>：获取函数，在读取属性时调用。默认值为 undefined。</li><li><code>[[Set]]</code>：设置函数，在写入属性时调用。默认值为 undefined。</li></ul><blockquote><p>数据属性&amp;&amp;访问器属性是不能直接定义的，必须使用 <code>Object.defineProperty(object, 属性key, 数据属性||访问器属性)</code></p></blockquote><h3 id="object-定义多个属性" tabindex="-1">Object 定义多个属性 <a class="header-anchor" href="#object-定义多个属性" aria-hidden="true">#</a></h3><p><code>Object.define-Properties()</code>这个方法可以通过多个描述符一次性定义多个属性。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> book </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperties</span><span style="color:#A6ACCD;">(book</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">year_</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2017</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">edition</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">year</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">year_</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newValue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">newValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2017</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">year_</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">edition</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newValue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2017</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h3 id="object读取属性的特性" tabindex="-1">Object读取属性的特性 <a class="header-anchor" href="#object读取属性的特性" aria-hidden="true">#</a></h3><p><code>Object.getOwnPropertyDescriptor(object, 属性key)</code>方法可以取得指定属性的属性描述符，单个属性的 ECMAScript 2017 新增了 <code>Object.getOwnPropertyDescriptors(object)</code> 返回整个对象的</p><h2 id="对象的创建" tabindex="-1">对象的创建 <a class="header-anchor" href="#对象的创建" aria-hidden="true">#</a></h2><h3 id="_1-工厂模式" tabindex="-1">1. 工厂模式 <a class="header-anchor" href="#_1-工厂模式" aria-hidden="true">#</a></h3><p>使用工厂函数，返回值是一个object</p><h3 id="_2-构造函数模式" tabindex="-1">2. 构造函数模式 <a class="header-anchor" href="#_2-构造函数模式" aria-hidden="true">#</a></h3><p>使用一个构造函数，通过 new Constractor()，得到一个object</p><h2 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-hidden="true">#</a></h2><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-hidden="true">#</a></h2><h3 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-hidden="true">#</a></h3><h2 id="类" tabindex="-1">类 <a class="header-anchor" href="#类" aria-hidden="true">#</a></h2>`,25),p=[o];function t(c,r,i,d,y,D){return a(),n("div",null,p)}const C=s(l,[["render",t]]);export{h as __pageData,C as default};
