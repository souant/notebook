import{_ as s,o as n,c as a,d as l}from"./app.af694299.js";const C=JSON.parse('{"title":"代理与反射","description":"","frontmatter":{},"headers":[{"level":2,"title":"代理","slug":"代理","link":"#代理","children":[]},{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[]},{"level":2,"title":"捕获器","slug":"捕获器","link":"#捕获器","children":[]}],"relativePath":"docs/javascript/books/javascript高级程序设计/09-代理与反射.md"}'),o={name:"docs/javascript/books/javascript高级程序设计/09-代理与反射.md"},e=l(`<h1 id="代理与反射" tabindex="-1">代理与反射 <a class="header-anchor" href="#代理与反射" aria-hidden="true">#</a></h1><h2 id="代理" tabindex="-1">代理 <a class="header-anchor" href="#代理" aria-hidden="true">#</a></h2><p>代理可视为目标对象的替身</p><p>使用 Proxy 构造函数创建</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> target </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> handler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">intercepted</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 代理</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> proxy </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Proxy</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> hanlder)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(proxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// intercepted</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// bar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 撤销代理</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> proxy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> revoke </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Proxy</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">revocable</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handler)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(proxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// intercepted</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// bar</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">revoke</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(proxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// TypeError</span></span>
<span class="line"></span></code></pre></div><h2 id="反射" tabindex="-1">反射 <a class="header-anchor" href="#反射" aria-hidden="true">#</a></h2><p>所有<strong>捕获器</strong>都可以基于自己的参数重建原始操作行为，手动修改<strong>捕获器</strong>可能会导致这些原始行为被破坏</p><p>处理程序对象中所有可以捕获的方法都有对应的反射（<strong>Reflect</strong>）API 方法。这些方法与捕获器拦截的方法具有相同的名称和函数签名，而且也具有与被拦截方法相同的行为</p><h2 id="捕获器" tabindex="-1">捕获器 <a class="header-anchor" href="#捕获器" aria-hidden="true">#</a></h2><p>一共13 种不同的捕获器</p><ol><li><code>get()</code> 捕获器会在获取属性值的操作中被调用。对应的反射 API 方法为 Reflect.get()</li><li><code>set()</code> 捕获器会在设置属性值的操作中被调用。对应的反射 API 方法为 Reflect.set()</li><li><code>has()</code> 捕获器会在 in 操作符中被调用。对应的反射 API 方法为 Reflect.has()</li><li><code>defineProperty()</code> 捕获器会在 Object.defineProperty()中被调用。对应的反射 API 方法为Reflect.defineProperty()</li><li><code>getOwnPropertyDescriptor()</code> 捕获器会在 Object.getOwnPropertyDescriptor()中被调用。对应的反射 API 方法为 Reflect.getOwnPropertyDescriptor()</li><li><code>deleteProperty()</code> 捕获器会在 delete 操作符中被调用。对应的反射 API 方法为 Reflect.deleteProperty()</li><li><code>ownKeys()</code> 捕获器会在 Object.keys()及类似方法中被调用。对应的反射 API 方法为 Reflect.ownKeys()</li><li><code>getPrototypeOf()</code> 捕获器会在 Object.getPrototypeOf()中被调用。对应的反射 API 方法为Reflect.getPrototypeOf()</li><li><code>setPrototypeOf()</code> 捕获器会在 Object.setPrototypeOf()中被调用。对应的反射 API 方法为Reflect.setPrototypeOf()</li><li><code>isExtensible()</code> 捕获器会在 Object.isExtensible()中被调用。对应的反射 API 方法为Reflect.isExtensible()</li><li><code>preventExtensions()</code> 捕获器会在 Object.preventExtensions()中被调用。对应的反射 API方法为 Reflect.preventExtensions()</li><li><code>apply()</code> 捕获器会在调用函数时中被调用。对应的反射 API 方法为 Reflect.apply()</li><li><code>construct()</code> 捕获器会在 new 操作符中被调用。对应的反射 API 方法为 Reflect.construct()</li></ol>`,11),p=[e];function t(c,r,y,D,i,A){return n(),a("div",null,p)}const d=s(o,[["render",t]]);export{C as __pageData,d as default};
