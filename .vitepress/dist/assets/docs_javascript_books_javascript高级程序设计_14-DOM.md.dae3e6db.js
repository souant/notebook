import{_ as e,o as s,c as o,d as l}from"./app.dd7e0640.js";const F=JSON.parse('{"title":"DOM","description":"","frontmatter":{},"headers":[{"level":2,"title":"DOM 节点层级","slug":"dom-节点层级","link":"#dom-节点层级","children":[]},{"level":2,"title":"Node & Document","slug":"node-document","link":"#node-document","children":[{"level":3,"title":"Node","slug":"node","link":"#node","children":[]},{"level":3,"title":"Document","slug":"document","link":"#document","children":[]}]},{"level":2,"title":"MutationObserver 接口","slug":"mutationobserver-接口","link":"#mutationobserver-接口","children":[]}],"relativePath":"docs/javascript/books/javascript高级程序设计/14-DOM.md"}'),a={name:"docs/javascript/books/javascript高级程序设计/14-DOM.md"},n=l(`<h1 id="dom" tabindex="-1">DOM <a class="header-anchor" href="#dom" aria-hidden="true">#</a></h1><p>文档对象模型（DOM，Document Object Model）是 HTML 和 XML 文档的编程接口</p><p>DOM 表示由多层节点构成的文档，通过它开发者可以添加、删除和修改页面的各个部分</p><h2 id="dom-节点层级" tabindex="-1">DOM 节点层级 <a class="header-anchor" href="#dom-节点层级" aria-hidden="true">#</a></h2><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Sample Page</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Hello World!</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="node-document" tabindex="-1">Node &amp; Document <a class="header-anchor" href="#node-document" aria-hidden="true">#</a></h2><p>以下是 DOM 节点类型常量</p><ol><li><code>Node.ELEMENT_NODE</code> 元素节点</li><li><code>Node.ATTRIBUTE_NODE</code> 属性节点</li><li><code>Node.TEXT_NODE</code> 文本节点</li><li><code>Node.CDATA_SECTION_NODE</code> XML 中特有的 CDATA 区块，只在 XML 文档中有效, <code>&lt;![CDATA[This is some content.]]&gt;</code></li><li><code>Node.ENTITY_REFERENCE_NODE </code></li><li><code>Node.ENTITY_NODE</code></li><li><code>Node.PROCESSING_INSTRUCTION_NODE</code></li><li><code>Node.COMMENT_NODE</code> 注释节点，<code>&lt;!-- A comment --&gt;</code></li><li><code>Node.DOCUMENT_NODE</code></li><li><code>Node.DOCUMENT_TYPE_NODE </code> DocumentType 类型的节点包含文档的文档类型信息，</li><li><code>Node.DOCUMENT_FRAGMENT_NODE</code> DocumentFragment 类型是唯一一个在标记中没有对应表示的类型， document.createDocumentFragment()创建</li><li><code>Node.NOTATION_NODE</code></li></ol><h3 id="node" tabindex="-1">Node <a class="header-anchor" href="#node" aria-hidden="true">#</a></h3><ul><li><code>dom.nodeType</code> 返回 dom 节点的类型</li><li><code>dom.nodeName</code> 返回 dom 节点的标签名</li><li><code>dom.childNodes</code> 返回该 dom 下的子节点 DOM 列表，是一个 NodeList 实例</li><li><code>dom.parentNode</code> 返回该节点的父节点 DOM</li><li><code>dom.previousSibling</code> 返回该节点相邻的上一个节点 DOM，该节点是第一个节点，返回 null</li><li><code>dom.nextSibling</code> 返回该节点相邻的下一个节点 DOM，该节点是最后一个节点，返回 null</li><li><code>dom.firstChild</code> 返回子节点的第一个，没有子节点，返回 null</li><li><code>dom.lastChild</code> 返回子节点的最后一个，没有子节点，返回 null</li><li><code>dom.appendChild(childNode)</code> 在该节点的子节点末尾添加一个子节点</li><li><code>dom.insertBefore(childNode, 插入位置子节点)</code> 插入位置子节点不传，将子节点插入到末尾</li><li><code>dom.replaceChild(newNode, replaceNode)</code> 替换子节点</li><li><code>dom.removeChild(childNode)</code> 删除子节点</li><li><code>dom.cloneNode(是否深度clone)</code> 克隆节点</li><li><code>dom.getAttribute(&#39;attrName&#39;)</code> 获取节点属性值</li><li><code>dom.setAttribute(attrName, attrValue)</code> 设置节点属性值</li><li><code>dom.removeAttribute(attrName)</code> 移除属性</li></ul><h3 id="document" tabindex="-1">Document <a class="header-anchor" href="#document" aria-hidden="true">#</a></h3><ul><li><code>document.doctype</code> 取得对&lt;!doctype&gt;的引用</li><li><code>document.documentElement</code> 获取<code>&lt;html&gt;</code>引用</li><li><code>document.head</code> 获取<code>&lt;head&gt;</code>引用</li><li><code>document.body</code> 获取<code>&lt;body&gt;</code>引用</li><li><code>document.title</code> 获取文档标题内容，也可以修改</li><li><code>document.URL</code> 获取文档 URL</li><li><code>document.domain</code> 获取文档域名</li><li><code>document.referrer</code> 获取文档来源</li><li><code>document.anchors</code> 获取文档中所有带 name 属性的<code>&lt;a&gt;</code>元素</li><li><code>document.links</code> 获取文档中所有带 href 属性的<code>&lt;a&gt;</code>元素</li><li><code>document.applets</code> 获取文档中所有<code>&lt;applet&gt;</code>元素, <code>&lt;applet&gt;</code>不再使用</li><li><code>document.forms</code> 获取文档中所有<code>&lt;form&gt;</code>元素</li><li><code>document.images</code> 获取文档中所有<code>&lt;img&gt;</code>元素</li></ul><p>创建与查询</p><ul><li><code>document.createElement(&quot;标签名&quot;)</code> 创建元素 ，</li><li>定位 DOM 获取 DOM 标签 <ol><li><code>document.getElementById(&quot;ID名&quot;)</code></li><li><code>document.getElementByClassName(&quot;类名&quot;)</code></li><li><code>document.getElementByTagName(&quot;标签名&quot;)</code></li></ol></li></ul><h2 id="mutationobserver-接口" tabindex="-1">MutationObserver 接口 <a class="header-anchor" href="#mutationobserver-接口" aria-hidden="true">#</a></h2><p>MutationObserver 监听 DOM 变化</p><p>MutationObserver回调都会收到一个 MutationRecord 实例的数组，包含的信息包括发生了什么变化，以及 DOM 的哪一部分受到了影响</p><p>连续修改会生成多个 MutationRecord 实例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> observer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MutationObserver</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">mutationRecords</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">mutationRecords</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">observer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observe</span><span style="color:#A6ACCD;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">attributes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAttribute</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//  {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    addedNodes: NodeList [],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    attributeName: &quot;foo&quot;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    attributeNamespace: null,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    nextSibling: null,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    oldValue: null,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    previousSibling: null</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    removedNodes: NodeList [],</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    target: body</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//    type: &quot;attributes&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 终止执行回调</span></span>
<span class="line"><span style="color:#A6ACCD;">observer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">disconnect</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>MutationObserverInit 与观察范围</p><ul><li><p><code>subtree</code> 布尔值，表示除了目标节点，是否观察目标节点的子树（后代）如果是 false，则只观察目标节点的变化； 如果是 true，则观察目标节点及其整个子树 默认为 false</p></li><li><p><code>attributes</code> 布尔值，表示是否观察目标节点的属性变化 默认为 false</p></li><li><p><code>attributeFilter</code> 字符串数组，表示要观察哪些属性的变化 把这个值设置为 true 也会将 attributes 的值转换为 true 默认为观察所有属性</p></li><li><p><code>attributeOldValue</code> 布尔值，表示 <code>MutationRecord</code> 是否记录变化之前的属性值 把这个值设置为 true 也会将 attributes 的值转换为 true 默认为 false</p></li><li><p><code>characterData</code> 布尔值，表示修改字符数据是否触发变化事件默认为 false</p></li><li><p><code>characterDataOldValue</code> 布尔值，表示 MutationRecord 是否记录变化之前的字符数据 把这个值设置为 true 也会将 characterData 的值转换为 true 默认为 false</p></li><li><p><code>childList</code> 布尔值，表示修改目标节点的子节点是否触发变化事件 默认为 false</p></li></ul><p>参考：<a href="./../../others/MutationObserver.html">MutationObserver</a></p>`,22),t=[n];function c(p,d,i,r,D,y){return s(),o("div",null,t)}const m=e(a,[["render",c]]);export{F as __pageData,m as default};
