import{_ as s,o as a,c as l,d as n}from"./app.dd7e0640.js";const C=JSON.parse('{"title":"DOM扩展","description":"","frontmatter":{},"headers":[{"level":2,"title":"选择器API","slug":"选择器api","link":"#选择器api","children":[]},{"level":2,"title":"元素遍历","slug":"元素遍历","link":"#元素遍历","children":[]},{"level":2,"title":"CSS扩展","slug":"css扩展","link":"#css扩展","children":[]},{"level":2,"title":"HTMLDocument 扩展","slug":"htmldocument-扩展","link":"#htmldocument-扩展","children":[]},{"level":2,"title":"自定义数据属性","slug":"自定义数据属性","link":"#自定义数据属性","children":[]},{"level":2,"title":"插入标记innerHTML&outerHTML","slug":"插入标记innerhtml-outerhtml","link":"#插入标记innerhtml-outerhtml","children":[]},{"level":2,"title":"专有扩展","slug":"专有扩展","link":"#专有扩展","children":[{"level":3,"title":"contains()方法","slug":"contains-方法","link":"#contains-方法","children":[]}]}],"relativePath":"docs/javascript/books/javascript高级程序设计/15-DOM扩展.md"}'),e={name:"docs/javascript/books/javascript高级程序设计/15-DOM扩展.md"},o=n(`<h1 id="dom扩展" tabindex="-1">DOM扩展 <a class="header-anchor" href="#dom扩展" aria-hidden="true">#</a></h1><h2 id="选择器api" tabindex="-1">选择器API <a class="header-anchor" href="#选择器api" aria-hidden="true">#</a></h2><ul><li><code>querySelector(CSS选择符) </code> 返回匹配该模式的第一个后代元素</li><li><code>querySelectorAll(CSS选择符)</code> 返回所有匹配的节点</li><li><code>matches(CSS选择符)</code> 元素匹配则该选择符返回 true，否则返回 false</li></ul><h2 id="元素遍历" tabindex="-1">元素遍历 <a class="header-anchor" href="#元素遍历" aria-hidden="true">#</a></h2><ul><li><code>childElementCount</code>，返回子元素数量（不包含文本节点和注释）；</li><li><code>firstElementChild</code>，指向第一个 Element 类型的子元素（Element 版 firstChild）；</li><li><code>lastElementChild</code>，指向最后一个 Element 类型的子元素（Element 版 lastChild）；</li><li><code>previousElementSibling</code> ，指向前一个 Element 类型的同胞元素（ Element 版previousSibling）；</li><li><code>nextElementSibling</code>，指向后一个 Element 类型的同胞元素（Element 版 nextSibling）。</li></ul><h2 id="css扩展" tabindex="-1">CSS扩展 <a class="header-anchor" href="#css扩展" aria-hidden="true">#</a></h2><ul><li><code>getElementsByClassName()</code> 通过类名获取节点</li><li><code>dom.classList</code> 返回类名列表，DOMTokenList实例 <ol><li>add(value)，向类名列表中添加指定的字符串值 value。如果这个值已经存在，则什么也不做。</li><li>contains(value)，返回布尔值，表示给定的 value 是否存在。</li><li>remove(value)，从类名列表中删除指定的字符串值 value。</li><li>toggle(value)，如果类名列表中已经存在指定的 value，则删除；如果不存在，则添加。</li></ol></li></ul><h2 id="htmldocument-扩展" tabindex="-1">HTMLDocument 扩展 <a class="header-anchor" href="#htmldocument-扩展" aria-hidden="true">#</a></h2><ul><li><code>document.readyState</code> 文档加载状态 loading，表示文档正在加载；complete，表示文档加载完成。</li><li><code>document.compatMode</code> 文档渲染模式 CSS1Compat，标准模式；BackCompat，混杂模式</li><li><code>document.head</code> 文档<code>&lt;dead&gt;</code>引用</li><li><code>document.characterSet</code> 文档字符集</li></ul><h2 id="自定义数据属性" tabindex="-1">自定义数据属性 <a class="header-anchor" href="#自定义数据属性" aria-hidden="true">#</a></h2><p>使用 <code>data-attrName=&quot;value&quot;</code>定义</p><p>可以使用 <code>document.dataset.attrName</code> 获取自定义属性值</p><blockquote><p>注意：attrName在html标签中使用短横线，在获取时需使用小驼峰名</p></blockquote><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myDiv</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">data-appId</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">12345</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">data-myname</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Nicholas</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 本例中使用的方法仅用于示范</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> div </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myDiv</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 取得自定义数据属性的值</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> appId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dataset</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">appId</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> myName </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dataset</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">myname</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 设置自定义数据属性的值</span></span>
<span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dataset</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">appId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">23456</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dataset</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">myname </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Michael</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 有&quot;myname&quot;吗？</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dataset</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">myname)</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Hello, </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">div</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dataset</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">myname</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="插入标记innerhtml-outerhtml" tabindex="-1">插入标记innerHTML&amp;outerHTML <a class="header-anchor" href="#插入标记innerhtml-outerhtml" aria-hidden="true">#</a></h2><ol><li>innerHTML</li></ol><p>innerHTML根据提供的字符串值以新的 DOM 子树替代元素中原来包含的所有节点</p><p>所有现代浏览器中，通过 innerHTML 插入的<code>&lt;script&gt;</code>标签是不会执行的</p><ol start="2"><li>outerHTML</li></ol><p>写入outerHTML 属性时，调用它的元素会被传入的 HTML字符串经解释之后生成的 DOM 子树取代</p><h2 id="专有扩展" tabindex="-1">专有扩展 <a class="header-anchor" href="#专有扩展" aria-hidden="true">#</a></h2><h3 id="contains-方法" tabindex="-1">contains()方法 <a class="header-anchor" href="#contains-方法" aria-hidden="true">#</a></h3><p>目标节点是被搜索节点的后代，contains()返回 true</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">contains</span><span style="color:#A6ACCD;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span></code></pre></div>`,25),t=[o];function p(c,r,i,d,D,y){return a(),l("div",null,t)}const h=s(e,[["render",p]]);export{C as __pageData,h as default};
