import{_ as e,o as s,c as l,d as n}from"./app.5d78cf96.js";const a="/notebook/assets/02.9cd7e0d5.png",t="/notebook/assets/03.87829529.png",o="/notebook/assets/04.75a25717.png",E=JSON.parse('{"title":"事件","description":"","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"事件流","slug":"事件流","link":"#事件流","children":[{"level":3,"title":"DOM0 events","slug":"dom0-events","link":"#dom0-events","children":[]},{"level":3,"title":"DOM2 events","slug":"dom2-events","link":"#dom2-events","children":[]},{"level":3,"title":"DOM3 Events","slug":"dom3-events","link":"#dom3-events","children":[]}]},{"level":2,"title":"事件优化","slug":"事件优化","link":"#事件优化","children":[]}],"relativePath":"docs/javascript/books/javascript高级程序设计/17-事件.md"}'),i={name:"docs/javascript/books/javascript高级程序设计/17-事件.md"},c=n('<h1 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-hidden="true">#</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-hidden="true">#</a></h2><p>JavaScript 与 HTML 的交互是通过事件实现的</p><h2 id="事件流" tabindex="-1">事件流 <a class="header-anchor" href="#事件流" aria-hidden="true">#</a></h2><ol><li>事件冒泡， <img src="'+a+'" alt="事件冒泡"></li><li>事件捕获 <img src="'+t+`" alt="事件捕获"></li></ol><h3 id="dom0-events" tabindex="-1">DOM0 events <a class="header-anchor" href="#dom0-events" aria-hidden="true">#</a></h3><p>DOM0 事件，特指 DOM 标准还未规范时定义的事件，一般时个浏览器定义</p><p>事件处理程序： 一般使用在标签元素上使用<code>onclick=&quot;eventFunc&quot;</code>这种或者</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> btn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementByTagName</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">btn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// TODO</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 清除事件</span></span>
<span class="line"><span style="color:#A6ACCD;">btn</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onclick </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"></span></code></pre></div><h3 id="dom2-events" tabindex="-1">DOM2 events <a class="header-anchor" href="#dom2-events" aria-hidden="true">#</a></h3><p>DOM2 Events 规范规定事件流分为 3 个阶段：事件捕获、到达目标和事件冒泡。事件捕获最先发生， 为提前拦截事件提供了可能。然后，实际的目标元素接收到事件。最后一个阶段是冒泡，最迟要在这个 阶段响应事件</p><p><img src="`+o+'" alt="DOM2事件流"></p><blockquote><p>注意 DOM2 Events 规范明确捕获阶段不命中事件目标，但现代浏览器都会在捕获阶段在事件目标上触发事件</p></blockquote><p>事件处理程序：</p><p>使用<code>addEventListener</code>、<code>removeEventListener</code>，添加和移除事件，参数为：事件名、事件处理函数、一个布尔值(true：捕获阶段处理事件，false（默认）：冒泡阶段处理事件)</p><h3 id="dom3-events" tabindex="-1">DOM3 Events <a class="header-anchor" href="#dom3-events" aria-hidden="true">#</a></h3><p>DOM3 Events 在 DOM2 Events 基础上重新定义了事件，并增加了新的事件类型</p><p>DOM3 Events 定义了如下事件类型。</p><ul><li>用户界面事件（UIEvent）：涉及与 BOM 交互的通用浏览器事件。</li><li>焦点事件（FocusEvent）：在元素获得和失去焦点时触发。</li><li>鼠标事件（MouseEvent）：使用鼠标在页面上执行某些操作时触发。</li><li>滚轮事件（WheelEvent）：使用鼠标滚轮（或类似设备）时触发。</li><li>输入事件（InputEvent）：向文档中输入文本时触发。</li><li>键盘事件（KeyboardEvent）：使用键盘在页面上执行某些操作时触发。</li><li>合成事件（CompositionEvent）：在使用某种 IME（Input Method Editor，输入法编辑器）输入字符时触发。</li></ul><h4 id="用户界面事件" tabindex="-1">用户界面事件 <a class="header-anchor" href="#用户界面事件" aria-hidden="true">#</a></h4><ul><li>DOMActivate：元素被用户通过鼠标或键盘操作激活时触发（比 click 或 keydown 更通用）。 这个事件在 DOM3 Events 中已经废弃。因为浏览器实现之间存在差异，所以不要使用它。</li><li>load：在 window 上当页面加载完成后触发，在窗套（<code>&lt;frameset&gt;</code>）上当所有窗格（<code>&lt;frame&gt;</code>） 都加载完成后触发，在<code>&lt;img&gt;</code>元素上当图片加载完成后触发，在<code>&lt;object&gt;</code>元素上当相应对象加 载完成后触发。</li><li>unload：在 window 上当页面完全卸载后触发，在窗套上当所有窗格都卸载完成后触发，在 <code>&lt;object&gt;</code>元素上当相应对象卸载完成后触发。</li><li>abort：在<code>&lt;object&gt;</code>元素上当相应对象加载完成前被用户提前终止下载时触发。</li><li>error：在 window 上当 JavaScript 报错时触发，在<code>&lt;img&gt;</code>元素上当无法加载指定图片时触发， 在<code>&lt;object&gt;</code>元素上当无法加载相应对象时触发，在窗套上当一个或多个窗格无法完成加载时 触发。</li><li>select：在文本框（<code>&lt;input&gt;</code>或 textarea）上当用户选择了一个或多个字符时触发。</li><li>resize：在 window 或窗格上当窗口或窗格被缩放时触发。</li><li>scroll：当用户滚动包含滚动条的元素时在元素上触发。<code>&lt;body&gt;</code>元素包含已加载页面的滚动条。</li></ul><h4 id="焦点事件" tabindex="-1">焦点事件 <a class="header-anchor" href="#焦点事件" aria-hidden="true">#</a></h4><ul><li>blur：当元素失去焦点时触发。这个事件不冒泡，所有浏览器都支持。</li><li>DOMFocusIn：当元素获得焦点时触发。这个事件是 focus 的冒泡版。Opera 是唯一支持这个事 件的主流浏览器。DOM3 Events 废弃了 DOMFocusIn，推荐 focusin。</li><li>DOMFocusOut：当元素失去焦点时触发。这个事件是 blur 的通用版。Opera 是唯一支持这个事 件的主流浏览器。DOM3 Events 废弃了 DOMFocusOut，推荐 focusout。</li><li>focus：当元素获得焦点时触发。这个事件不冒泡，所有浏览器都支持。</li><li>focusin：当元素获得焦点时触发。这个事件是 focus 的冒泡版。</li><li>focusout：当元素失去焦点时触发。这个事件是 blur 的通用版。</li></ul><h4 id="鼠标和滚轮事件" tabindex="-1">鼠标和滚轮事件 <a class="header-anchor" href="#鼠标和滚轮事件" aria-hidden="true">#</a></h4><ul><li>click：在用户单击鼠标主键（通常是左键）或按键盘回车键时触发。这主要是基于无障碍的考 虑，让键盘和鼠标都可以触发 onclick 事件处理程序。</li><li>dblclick：在用户双击鼠标主键（通常是左键）时触发。这个事件不是在 DOM2 Events 中定义 的，但得到了很好的支持，DOM3 Events 将其进行了标准化。</li><li>mousedown：在用户按下任意鼠标键时触发。这个事件不能通过键盘触发。</li><li>mouseenter：在用户把鼠标光标从元素外部移到元素内部时触发。这个事件不冒泡，也不会在 光标经过后代元素时触发。mouseenter 事件不是在 DOM2 Events 中定义的，而是 DOM3 Events 中新增的事件。</li><li>mouseleave：在用户把鼠标光标从元素内部移到元素外部时触发。这个事件不冒泡，也不会在 光标经过后代元素时触发。mouseleave 事件不是在 DOM2 Events 中定义的，而是 DOM3 Events 中新增的事件。</li><li>mousemove：在鼠标光标在元素上移动时反复触发。这个事件不能通过键盘触发。</li><li>mouseout：在用户把鼠标光标从一个元素移到另一个元素上时触发。移到的元素可以是原始元 素的外部元素，也可以是原始元素的子元素。这个事件不能通过键盘触发。</li><li>mouseover：在用户把鼠标光标从元素外部移到元素内部时触发。这个事件不能通过键盘触发。</li><li>mouseup：在用户释放鼠标键时触发。这个事件不能通过键盘触发。</li></ul><h4 id="键盘与输入事件" tabindex="-1">键盘与输入事件 <a class="header-anchor" href="#键盘与输入事件" aria-hidden="true">#</a></h4><ul><li>keydown，用户按下键盘上某个键时触发，而且持续按住会重复触发。</li><li>keypress，用户按下键盘上某个键并产生字符时触发，而且持续按住会重复触发。Esc 键也会 触发这个事件。DOM3 Events 废弃了 keypress 事件，而推荐 textInput 事件。</li><li>keyup，用户释放键盘上某个键时触发。</li></ul><h4 id="合成事件" tabindex="-1">合成事件 <a class="header-anchor" href="#合成事件" aria-hidden="true">#</a></h4><p>合成事件是 DOM3 Events 中新增的，用于处理通常使用 IME 输入时的复杂输入序列</p><ul><li>compositionstart，在 IME 的文本合成系统打开时触发，表示输入即将开始；</li><li>compositionupdate，在新字符插入输入字段时触发；</li><li>compositionend，在 IME 的文本合成系统关闭时触发，表示恢复正常键盘输入</li></ul><h2 id="事件优化" tabindex="-1">事件优化 <a class="header-anchor" href="#事件优化" aria-hidden="true">#</a></h2><p>使用事件，需要考虑内存与性能问题。例如：</p><ul><li>最好限制一个页面中事件处理程序的数量，因为它们会占用过多内存，导致页面响应缓慢；</li><li>利用事件冒泡，事件委托可以解决限制事件处理程序数量的问题；</li><li>最好在页面卸载之前删除所有事件处理程序。</li></ul>',33),r=[c];function p(d,u,h,D,v,m){return s(),l("div",null,r)}const F=e(i,[["render",p]]);export{E as __pageData,F as default};
