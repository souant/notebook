import{_ as e,c as a,o as t,d as r}from"./app.89540efa.js";const b=JSON.parse('{"title":"04-Javascript变量、作用域与内存","description":"04-Javascript变量、作用域与内存","frontmatter":{"lang":"zh-CN","title":"04-Javascript变量、作用域与内存","description":"04-Javascript变量、作用域与内存"},"headers":[{"level":2,"title":"js执行上下文","slug":"js执行上下文","link":"#js执行上下文","children":[]},{"level":2,"title":"变量赋值","slug":"变量赋值","link":"#变量赋值","children":[]},{"level":2,"title":"js内存回收","slug":"js内存回收","link":"#js内存回收","children":[]}],"relativePath":"docs/javascript/javascript高级程序设计/04-Javascript变量、作用域与内存.md"}'),s={name:"docs/javascript/javascript高级程序设计/04-Javascript变量、作用域与内存.md"},c=r('<h1 id="变量、作用域与内存" tabindex="-1">变量、作用域与内存 <a class="header-anchor" href="#变量、作用域与内存" aria-hidden="true">#</a></h1><blockquote><p>javascript变量是松散类型的，可以存储任意js类型，也即弱类型<br> 变量值分为两种，<strong>原始值</strong>与<strong>引用值</strong>，原始值即js的6种基础类型的值<br> 原始值存在栈内存中<br> 引用值存在堆内存中<br> 引用值变量，在内存中存的是该对象的内存指针（内存地址）</p></blockquote><h2 id="js执行上下文" tabindex="-1">js执行上下文 <a class="header-anchor" href="#js执行上下文" aria-hidden="true">#</a></h2><blockquote><p>全局上下文、函数上下文、块级上下文</p></blockquote><h2 id="变量赋值" tabindex="-1">变量赋值 <a class="header-anchor" href="#变量赋值" aria-hidden="true">#</a></h2><blockquote><p>const 声明的变量需要在一开始就被初始化<br> 但是Object对象类型的值可以被改变，可以用Object.freeze(object)初始化对象，这样对象的值就不会被改变</p></blockquote><h2 id="js内存回收" tabindex="-1">js内存回收 <a class="header-anchor" href="#js内存回收" aria-hidden="true">#</a></h2><blockquote><p>javascript执行引擎会自动的内存管理，实现内存分配或资源回收<br> 资源回收：变量不再被使用， 周期性自动执行<br> 内存垃圾回收策略：1、标记清理，2、引用计数</p></blockquote>',8),i=[c];function o(n,l,d,_,h,p){return t(),a("div",null,i)}const u=e(s,[["render",o]]);export{b as __pageData,u as default};
