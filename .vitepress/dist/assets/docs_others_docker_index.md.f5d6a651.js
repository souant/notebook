import{_ as e,o as r,c as a,d as t}from"./app.14fc8a30.js";const k=JSON.parse('{"title":"docker 容器","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是容器？","slug":"什么是容器","link":"#什么是容器","children":[]},{"level":2,"title":"什么是容器镜像？","slug":"什么是容器镜像","link":"#什么是容器镜像","children":[]}],"relativePath":"docs/others/docker/index.md"}'),i={name:"docs/others/docker/index.md"},d=t('<h1 id="docker-容器" tabindex="-1">docker 容器 <a class="header-anchor" href="#docker-容器" aria-hidden="true">#</a></h1><h2 id="什么是容器" tabindex="-1">什么是容器？ <a class="header-anchor" href="#什么是容器" aria-hidden="true">#</a></h2><p>简而言之，容器是您机器上的沙盒进程，与主机上的所有其他进程隔离。这种隔离利用了<a href="https://medium.com/@saschagrunert/demystifying-containers-part-i-kernel-space-2c53d6979504" target="_blank" rel="noreferrer">内核命名空间和 cgroups</a>，这些功能在 Linux 中已经存在了很长时间。Docker 致力于使这些功能易于使用且易于使用。总结一下，一个容器：</p><ul><li>是图像的可运行实例。您可以使用 DockerAPI 或 CLI 创建、启动、停止、移动或删除容器。</li><li>可以在本地机器、虚拟机上运行或部署到云端。</li><li>是可移植的（可以在任何操作系统上运行）。</li><li>与其他容器隔离并运行自己的软件、二进制文件和配置。</li></ul><h2 id="什么是容器镜像" tabindex="-1">什么是容器镜像？ <a class="header-anchor" href="#什么是容器镜像" aria-hidden="true">#</a></h2><p>运行容器时，它使用隔离的文件系统。此自定义文件系统由容器映像提供。由于镜像包含容器的文件系统，它必须包含运行应用程序所需的一切——所有依赖项、配置、脚本、二进制文件等。镜像还包含容器的其他配置，例如环境变量、要运行的默认命令、和其他元数据。</p>',6),c=[d];function n(o,s,l,h,_,p){return r(),a("div",null,c)}const f=e(i,[["render",n]]);export{k as __pageData,f as default};
