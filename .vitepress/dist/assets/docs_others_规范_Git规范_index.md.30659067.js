import{_ as e,o as t,c as l,d as a}from"./app.dd7e0640.js";const f=JSON.parse('{"title":"Git 提交规范","description":"","frontmatter":{},"headers":[{"level":2,"title":"目的","slug":"目的","link":"#目的","children":[]},{"level":2,"title":"Git commit 日志基本规范","slug":"git-commit-日志基本规范","link":"#git-commit-日志基本规范","children":[{"level":3,"title":"type(必须)","slug":"type-必须","link":"#type-必须","children":[]},{"level":3,"title":"scope(可选)","slug":"scope-可选","link":"#scope-可选","children":[]},{"level":3,"title":"subject(必须)","slug":"subject-必须","link":"#subject-必须","children":[]},{"level":3,"title":"body(可选)","slug":"body-可选","link":"#body-可选","children":[]},{"level":3,"title":"footer(可选)","slug":"footer-可选","link":"#footer-可选","children":[]}]},{"level":2,"title":"Git 分支与版本发布规范","slug":"git-分支与版本发布规范","link":"#git-分支与版本发布规范","children":[{"level":3,"title":"分支命名：","slug":"分支命名","link":"#分支命名","children":[]},{"level":3,"title":"流程规范:","slug":"流程规范","link":"#流程规范","children":[]}]},{"level":2,"title":"参考：","slug":"参考","link":"#参考","children":[]}],"relativePath":"docs/others/规范/Git规范/index.md"}'),i={name:"docs/others/规范/Git规范/index.md"},d=a(`<h1 id="git-提交规范" tabindex="-1">Git 提交规范 <a class="header-anchor" href="#git-提交规范" aria-hidden="true">#</a></h1><h2 id="目的" tabindex="-1">目的 <a class="header-anchor" href="#目的" aria-hidden="true">#</a></h2><p>统一团队 Git commit 日志标准，便于后续代码 review，版本发布以及日志自动化生成等等。</p><p>统一团队的 Git 工作流，包括分支使用、tag 规范、issue 等</p><h2 id="git-commit-日志基本规范" tabindex="-1">Git commit 日志基本规范 <a class="header-anchor" href="#git-commit-日志基本规范" aria-hidden="true">#</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;BLANK LINE&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;body&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;BLANK LINE&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;footer&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="type-必须" tabindex="-1">type(必须) <a class="header-anchor" href="#type-必须" aria-hidden="true">#</a></h3><p>type 代表某次提交的类型，比如：是修复一个 bug 还是增加一个新的 feature。</p><p>类型如下：</p><ul><li>feat: 新功能(feature)</li><li>fix: 修复 bug</li><li>docs: 文档（documentation），比如 README, CHANGELOG, CONTRIBUTE 等等</li><li>style: 格式（不影响代码运行的变动），仅仅修改了空格、格式缩进、逗号等等，不改变代码逻辑</li><li>refactor: 重构（即不是新增功能，也不是修改 bug 的代码变动）</li><li>perf: 优化相关，比如提升性能、体验</li><li>test: 增加测试，测试用例，包括单元测试、集成测试等</li><li>chore: 构建过程或辅助工具的变动</li><li>revert: 回滚到上一个版本</li><li>merge：代码合并。</li><li>sync：同步主线或分支的 Bug。</li><li>build: 打包</li><li>ci: 与 CI（持续集成服务）有关的改动</li></ul><h3 id="scope-可选" tabindex="-1">scope(可选) <a class="header-anchor" href="#scope-可选" aria-hidden="true">#</a></h3><p>scope 用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><h3 id="subject-必须" tabindex="-1">subject(必须) <a class="header-anchor" href="#subject-必须" aria-hidden="true">#</a></h3><p>subject 是 commit 目的的简短描述，不超过 50 个字符。</p><h3 id="body-可选" tabindex="-1">body(可选) <a class="header-anchor" href="#body-可选" aria-hidden="true">#</a></h3><p>用新的空行将“标题”和“主体内容”隔开，Git 会自动识别第一行为摘要。</p><p>主体内容是 commit 目的的详细描述，可以放一些备注、说明等。</p><h3 id="footer-可选" tabindex="-1">footer(可选) <a class="header-anchor" href="#footer-可选" aria-hidden="true">#</a></h3><p>用新的空行隔开，描述与本次提交相关联的 break change 或 issue 。</p><h2 id="git-分支与版本发布规范" tabindex="-1">Git 分支与版本发布规范 <a class="header-anchor" href="#git-分支与版本发布规范" aria-hidden="true">#</a></h2><p>基本原则：master 为保护分支，不直接在 master 上进行代码修改和提交。</p><p>开发日常需求或者项目时，从 master 分支上 checkout 一个 feature 分支进行开发或者 bugfix 分支进行 bug 修复，功能测试完毕并且项目发布上线后，将 feature 分支合并到主干 master，并且打 Tag 发布，最后删除开发分支。</p><h3 id="分支命名" tabindex="-1">分支命名： <a class="header-anchor" href="#分支命名" aria-hidden="true">#</a></h3><table><thead><tr><th>分支</th><th style="text-align:left;">命名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td>主分支</td><td style="text-align:left;">master</td><td style="text-align:left;">主分支，负责记录上线版本的迭代，该分支代码与线上代码是完全一致的</td></tr><tr><td>开发分支</td><td style="text-align:left;">dev(develop)</td><td style="text-align:left;">开发分支，该分支记录相对稳定的版本</td></tr><tr><td>功能分支</td><td style="text-align:left;">feature-*</td><td style="text-align:left;">新功能分支，该分支从 develop 分支创建</td></tr><tr><td>发布版本</td><td style="text-align:left;">release-*</td><td style="text-align:left;">预发布分支，用于代码上线准备</td></tr><tr><td>修复分支</td><td style="text-align:left;">bugfix-*</td><td style="text-align:left;">bug 修复分支，修复代码的 bug</td></tr><tr><td>热修复分支</td><td style="text-align:left;">hotfix-*</td><td style="text-align:left;">热修复分支，用于修复某个紧急的 bug，该分支只有在紧急情况下使用</td></tr></tbody></table><h3 id="流程规范" tabindex="-1">流程规范: <a class="header-anchor" href="#流程规范" aria-hidden="true">#</a></h3><p>正常开发流程</p><ol><li>从 <code>develop</code> 分支切出一个新分支，根据是 功能 还是 bug，命名为 <code>feature-\\*</code> 或 <code>bugfix-\\*</code> 分支。</li><li>开发者完成开发，提交该分支到远程仓库。</li><li>开发者发起 <code>merge request</code> 请求（可在 gitlab 页面 New merge request），将新分支请求合并到 <code>develop</code> 分支，并提醒组长或同事进行 <code>code reviewer</code>。</li><li><code> code reviewer</code> 后，若无问题，则接受 <code>merge request</code>，并将新分支合并到 <code>develop</code> 分支，同时可以删除新建分支；若有问题，则不能进行合并，可 close 该请求，同时通知开发者在新分支上进行相应调整，调整完后提交代码，重复 <code>code reviewer</code> 流程。</li><li>转测时，直接从当前 <code>develop</code> 分支合并到 <code>release</code> 分支，重新构建测试环境，完成转测。</li><li>测试完成后，从 <code>release</code> 分支合并到 <code>master</code> 分支，基于 <code>master</code> 分支构建生产环境完成上线，并对 <code>master</code> 分支打 <code>tag</code>， <code>tag</code> 名可为 v1.0.0（即：版本号*上线时间）。</li></ol><h2 id="参考" tabindex="-1">参考： <a class="header-anchor" href="#参考" aria-hidden="true">#</a></h2><p><a href="https://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noreferrer">Commit message 和 Change log 编写指南</a></p>`,29),s=[d];function r(o,c,n,h,p,g){return t(),l("div",null,s)}const m=e(i,[["render",r]]);export{f as __pageData,m as default};
