import{_ as s,o as a,c as n,d as l}from"./app.c6cdb48e.js";const C=JSON.parse('{"title":"Javascript 规约","description":"","frontmatter":{},"headers":[{"level":2,"title":"一、编码风格","slug":"一、编码风格","link":"#一、编码风格","children":[]},{"level":2,"title":"1.1 命名","slug":"_1-1-命名","link":"#_1-1-命名","children":[]},{"level":2,"title":"1.2 缩进","slug":"_1-2-缩进","link":"#_1-2-缩进","children":[]},{"level":2,"title":"1.3 注释","slug":"_1-3-注释","link":"#_1-3-注释","children":[]},{"level":2,"title":"1.3 代码块","slug":"_1-3-代码块","link":"#_1-3-代码块","children":[]},{"level":2,"title":"1.4 最大字符数和最大行数","slug":"_1-4-最大字符数和最大行数","link":"#_1-4-最大字符数和最大行数","children":[]},{"level":2,"title":"二、语言特性","slug":"二、语言特性","link":"#二、语言特性","children":[]},{"level":2,"title":"2.1 变量申明","slug":"_2-1-变量申明","link":"#_2-1-变量申明","children":[]},{"level":2,"title":"2.2 字符串","slug":"_2-2-字符串","link":"#_2-2-字符串","children":[]},{"level":2,"title":"2.3 数组 & 对象","slug":"_2-3-数组-对象","link":"#_2-3-数组-对象","children":[]},{"level":2,"title":"2.4 函数","slug":"_2-4-函数","link":"#_2-4-函数","children":[]},{"level":2,"title":"2.5 操作符","slug":"_2-5-操作符","link":"#_2-5-操作符","children":[]},{"level":2,"title":"2.6 其他","slug":"_2-6-其他","link":"#_2-6-其他","children":[]},{"level":2,"title":"动词列表","slug":"动词列表","link":"#动词列表","children":[]}],"relativePath":"docs/others/规范/前端规范/Javascript规约.md"}'),p={name:"docs/others/规范/前端规范/Javascript规约.md"},o=l(`<h1 id="javascript-规约" tabindex="-1">Javascript 规约 <a class="header-anchor" href="#javascript-规约" aria-hidden="true">#</a></h1><h2 id="一、编码风格" tabindex="-1">一、编码风格 <a class="header-anchor" href="#一、编码风格" aria-hidden="true">#</a></h2><h2 id="_1-1-命名" tabindex="-1">1.1 命名 <a class="header-anchor" href="#_1-1-命名" aria-hidden="true">#</a></h2><ol><li><h3 id="【强制】命名规范" tabindex="-1">【强制】命名规范 <a class="header-anchor" href="#【强制】命名规范" aria-hidden="true">#</a></h3></li></ol><ul><li><p>命名均不能以下划线，也不能以下划线或美元符号结束</p><p>反例： <code>_name / name_ / name$</code></p></li><li><p>方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。</p><p>正例： <code>localValue / getHttpMessage() / inputUserId</code></p><ul><li>其中 method 方法命名必须是 动词 或者 动词 + 名词 形式 正例：<code>saveShopCarData /openShopCarInfoDialog</code> 反例：<code>save / open / show / go</code></li><li>特此说明，增删查改，详情统一使用如下 5 个单词，不得使用其他（目的是为了统一各个端）<code>add / update / delete / detail / get</code></li></ul></li><li><p>常量命名全部大写，单词间用下划线隔开，力求语义表达完整清楚，不要嫌名字长。</p><p>正例： <code>MAX_STOCK_COUNT</code></p><p>反例： <code>MAX_COUNT</code></p></li><li><p>使用大驼峰（PascalCase）命名类和构造函数。</p></li></ul><p>附： 函数方法常用的动词: <a href="#%E5%8A%A8%E8%AF%8D%E5%88%97%E8%A1%A8">附录1</a></p><h2 id="_1-2-缩进" tabindex="-1">1.2 缩进 <a class="header-anchor" href="#_1-2-缩进" aria-hidden="true">#</a></h2><ol><li><h3 id="【强制】使用-2-个空格缩进" tabindex="-1">【强制】使用 2 个空格缩进 <a class="header-anchor" href="#【强制】使用-2-个空格缩进" aria-hidden="true">#</a></h3></li></ol><p>统一使用 2 个空格缩进，不要使用 4 个空格或 tab 缩进：</p><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (x </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> y) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_1-3-注释" tabindex="-1">1.3 注释 <a class="header-anchor" href="#_1-3-注释" aria-hidden="true">#</a></h2><ol><li><h3 id="【强制】单行注释使用-。" tabindex="-1">【强制】单行注释使用 <code>//</code>。 <a class="header-anchor" href="#【强制】单行注释使用-。" aria-hidden="true">#</a></h3></li></ol><ul><li>注释内容和注释符之间需要有一个空格</li><li>注释行上方需要有一个空行（除非注释行上方是一个块的顶部），以增加可读性</li></ul><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> blur </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// is current tab</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> active </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> blur </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//is current tab</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> active </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li><h3 id="【强制】多行注释使用-而不是多行的-。" tabindex="-1">【强制】多行注释使用 <code>/** ... */</code>，而不是多行的 //。 <a class="header-anchor" href="#【强制】多行注释使用-而不是多行的-。" aria-hidden="true">#</a></h3></li></ol><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * make() returns a new elemen</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * based on the passed-in tag name</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">tag</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...return element</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// make() returns a new element</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// based on the passed in tag name</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">make</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">tag</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...return element</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li><h3 id="【强制】文档类注释使用-jsdoc-规范。" tabindex="-1">【强制】文档类注释使用 jsdoc 规范。 <a class="header-anchor" href="#【强制】文档类注释使用-jsdoc-规范。" aria-hidden="true">#</a></h3></li></ol><p>文档类注释，如函数、类、文件、事件等，推荐使用 jsdoc 规范或类 jsdoc 的规范。</p><p>示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Book类，代表一个书本.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">constructor</span><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">string</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">title</span><span style="color:#676E95;font-style:italic;"> - 书本的标题.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">string</span><span style="color:#89DDFF;font-style:italic;">}</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">author</span><span style="color:#676E95;font-style:italic;"> - 书本的作者.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Book</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">title</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">author</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">title</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">author</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">author</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Book</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * 获取书本的标题</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">returns</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#89DDFF;font-style:italic;">{</span><span style="color:#FFCB6B;font-style:italic;">string|*</span><span style="color:#89DDFF;font-style:italic;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">getTitle</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * 设置书本的页数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * </span><span style="color:#89DDFF;font-style:italic;">@</span><span style="color:#C792EA;font-style:italic;">param</span><span style="color:#676E95;font-style:italic;"> </span><span style="color:#A6ACCD;font-style:italic;">pageNum</span><span style="color:#676E95;font-style:italic;"> {number} 页数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">setPageNum</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">pageNum</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">pageNum</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pageNum</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="_1-3-代码块" tabindex="-1">1.3 代码块 <a class="header-anchor" href="#_1-3-代码块" aria-hidden="true">#</a></h2><ol><li><h3 id="【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。" tabindex="-1">【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。 <a class="header-anchor" href="#【推荐】不同逻辑、不同语义、不同业务的代码之间插入一个空行分隔开来以提升可读性。" aria-hidden="true">#</a></h3></li></ol><p>说明：任何情形，没有必要插入多个空行进行隔开。</p><ol start="2"><li><h3 id="【推荐】if-条件判断-和-for-循环最多三层" tabindex="-1">【推荐】if 条件判断 和 for 循环最多三层 <a class="header-anchor" href="#【推荐】if-条件判断-和-for-循环最多三层" aria-hidden="true">#</a></h3></li></ol><p>条件判断能使用三目运算符和逻辑运算符解决的，就不要使用条件判断，但是谨记不要写太长的三目运算符。如果超过 3 层请抽成函数，并写清楚注释。</p><ol start="3"><li><h3 id="【强制】逗号分隔的多行结构-始终加上最后一个逗号。eslint-comma-dangle" tabindex="-1">【强制】逗号分隔的多行结构，始终加上最后一个逗号。eslint: comma-dangle <a class="header-anchor" href="#【强制】逗号分隔的多行结构-始终加上最后一个逗号。eslint-comma-dangle" aria-hidden="true">#</a></h3></li></ol><p>这样可以使增删行更加容易，也会使 git diffs 更清晰。Babel 等编译器会在编译后的代码里帮我们去掉最后额外的逗号，因此不必担心在旧浏览器中的问题。</p><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> hero </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F07178;">firstName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Florence</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F07178;">lastName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Nightingale</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">+    </span><span style="color:#F07178;">inventorOf</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">coxcomb chart</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">modern nursing</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bad - 没有结尾逗号时</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> hero </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F07178;">firstName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Florence</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">-    </span><span style="color:#F07178;">lastName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Nightingale</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F07178;">inventorOf</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">coxcomb chart</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">modern nursing</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><ol start="4"><li><h3 id="【强制】大括号换行风格" tabindex="-1">【强制】大括号换行风格 <a class="header-anchor" href="#【强制】大括号换行风格" aria-hidden="true">#</a></h3></li></ol><ul><li>对于非空的代码块，大括号的换行方式采用 Egyptian Brackets 风格，具体规则如下： <ul><li>左大括号 <code>{</code> 前面不换行，后面换行</li><li>右大括号 <code>}</code> 前面换行</li><li>右大括号 <code>}</code> 后面是否换行有两种情况： <ul><li>如果 <code>}</code> 终结了整个语句，如条件语句、函数或类的主体，则需要换行</li><li>如果 <code>}</code> 后面存在 else、catch、while 等语句，或存在逗号、分号、右小括号（<code>)</code>），则不需要换行</li></ul></li></ul></li><li>对于空代码块，可以将大括号直接闭合。</li></ul><p>示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doNothing</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (condition) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// …</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (otherCondition) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// …</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (condition) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// …</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (otherCondition) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// …</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// …</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> (e) </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// …</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> (e) </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre></div><ol start="5"><li><h3 id="【强制】空格风格" tabindex="-1">【强制】空格风格 <a class="header-anchor" href="#【强制】空格风格" aria-hidden="true">#</a></h3></li></ol><ul><li>块的左大括号 <code>{</code> 前有一个空格：</li><li>控制语句（if、while 等）的左小括号 <code>(</code> 前有一个空格：</li><li>声明函数时，函数名和参数列表之间无空格：<code>function a(p1, p2, ...) { }</code></li><li>小括号(...)内部两侧无空格：</li><li>方括号[...]内部两侧无空格：</li><li>大括号{ ... }内部两侧有空格：</li><li>运算符两侧有空格，除了一元运算符：<code>let a = 1</code></li><li>定义对象字面量时， key, value 之间有且只有一个空格，不允许所谓的「水平对齐」：</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><ol start="6"><li><h3 id="【推荐】在文件末尾保留一行空行" tabindex="-1">【推荐】在文件末尾保留一行空行 <a class="header-anchor" href="#【推荐】在文件末尾保留一行空行" aria-hidden="true">#</a></h3></li></ol><p>在非空文件中保留拖尾换行是一种常见的 UNIX 风格。它的好处同输出文件到终端一样，方便在串联和追加文件时不会打断 shell 的提示。</p><h2 id="_1-4-最大字符数和最大行数" tabindex="-1">1.4 最大字符数和最大行数 <a class="header-anchor" href="#_1-4-最大字符数和最大行数" aria-hidden="true">#</a></h2><ol><li><h3 id="【推荐】单行最大字符数-120" tabindex="-1">【推荐】单行最大字符数：120 <a class="header-anchor" href="#【推荐】单行最大字符数-120" aria-hidden="true">#</a></h3></li></ol><p>过长的单行代码不易阅读和维护，需要进行合理换行。</p><p>我们推荐单行代码最多不要超过 120 个字符，除了以下两种情况：</p><ul><li>字符串和模板字符串</li><li>正则表达式</li></ul><ol start="2"><li><h3 id="【推荐】文件最大行数-1000" tabindex="-1">【推荐】文件最大行数：1000 <a class="header-anchor" href="#【推荐】文件最大行数-1000" aria-hidden="true">#</a></h3></li></ol><p>过长的文件不易阅读和维护，最好对其进行拆分。</p><h2 id="二、语言特性" tabindex="-1">二、语言特性 <a class="header-anchor" href="#二、语言特性" aria-hidden="true">#</a></h2><h2 id="_2-1-变量申明" tabindex="-1">2.1 变量申明 <a class="header-anchor" href="#_2-1-变量申明" aria-hidden="true">#</a></h2><ol><li><h3 id="【强制】使用-const-或-let-声明变量" tabindex="-1">【强制】使用 const 或 let 声明变量 <a class="header-anchor" href="#【强制】使用-const-或-let-声明变量" aria-hidden="true">#</a></h3></li></ol><p>从 ES6 开始，可以使用 let 和 const 关键字在块级作用域下声明变量。块级作用域在很多其他编程语言中都有使用，这样声明的变量不会污染全局命名空间。</p><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> bar</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> bar</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li><h3 id="【强制】声明的变量必须被使用" tabindex="-1">【强制】声明的变量必须被使用 <a class="header-anchor" href="#【强制】声明的变量必须被使用" aria-hidden="true">#</a></h3></li></ol><p>声明而未使用的变量、表达式可能带来潜在的问题，也会给维护者造成困扰，应将它们删除</p><ol start="3"><li><h3 id="【强制】不要在声明前就使用变量" tabindex="-1">【强制】不要在声明前就使用变量 <a class="header-anchor" href="#【强制】不要在声明前就使用变量" aria-hidden="true">#</a></h3></li></ol><p>在 ES5 中，由于 var 的声明提升作用，变量可以在 � 声明前 � 使用，但这样做可能给人带来疑惑和隐患，所以不要在声明前就使用变量</p><ol start="4"><li><h3 id="【强制】不要使用-new-number-string-boolean创建变量" tabindex="-1">【强制】不要使用 <code>new Number/String/Boolean</code>创建变量 <a class="header-anchor" href="#【强制】不要使用-new-number-string-boolean创建变量" aria-hidden="true">#</a></h3></li></ol><p>使用 <code>new Number/String//Boolean</code> 声明不会有任何好处，还会导致变量成为 <code>object</code> 类型，可能引起 bug。</p><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> bool </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> bool)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// =&gt; number, string, boolean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (num) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// false（0 相当于 false）</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (bool) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> bool </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> num</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> str</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> bool)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// =&gt; object, object, object</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (num) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// true（对象相当于 true）</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (bool) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// true（对象相当于 true）</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-2-字符串" tabindex="-1">2.2 字符串 <a class="header-anchor" href="#_2-2-字符串" aria-hidden="true">#</a></h2><ol><li><h3 id="【强制】字符串优先使用单引号" tabindex="-1">【强制】字符串优先使用单引号 <a class="header-anchor" href="#【强制】字符串优先使用单引号" aria-hidden="true">#</a></h3></li></ol><p>统一使用单引号 (&#39;)，不使用双引号 (&quot;)。这在创建 HTML 字符串非常有好处：</p><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> testDiv </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;div id=&quot;test&quot;&gt;&lt;/div&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>反例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> testDiv </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;div id=&#39;test&#39;&gt;&lt;/div&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ol><li>【推荐】使用模板字符串替代字符串拼接。</li></ol><p>正例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getDisplayName</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">nickName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">realName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">nickName</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> (</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">realName</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>反例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getDisplayName</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">nickName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">realName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nickName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> (</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">realName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-3-数组-对象" tabindex="-1">2.3 数组 &amp; 对象 <a class="header-anchor" href="#_2-3-数组-对象" aria-hidden="true">#</a></h2><ol><li><h3 id="【强制】使用字面量创建数组-对象" tabindex="-1">【强制】使用字面量创建数组 &amp; 对象 <a class="header-anchor" href="#【强制】使用字面量创建数组-对象" aria-hidden="true">#</a></h3></li></ol><p>不要使用 <code>new Array()</code> 和<code> Array()</code> 创建数组，除非为了构造某一长度的空数组。</p><p>正例:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">500</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 构造长度为 500 的空数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span></code></pre></div><p>反例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Array</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li><h3 id="【强制】某些数组方法的回调函数中必须包含-return-语句" tabindex="-1">【强制】某些数组方法的回调函数中必须包含 <code>return</code> 语句 <a class="header-anchor" href="#【强制】某些数组方法的回调函数中必须包含-return-语句" aria-hidden="true">#</a></h3></li></ol><p>以下数组方法： <code>map, filter, from , every, find, findIndex, reduce, reduceRight, some, sort </code> 的回调函数中必须包含 <code>return</code> 语句，否则可能会产生误用或错误。</p><h2 id="_2-4-函数" tabindex="-1">2.4 函数 <a class="header-anchor" href="#_2-4-函数" aria-hidden="true">#</a></h2><ol><li><h3 id="【强制】不要用-function-构造函数创建函数" tabindex="-1">【强制】不要用 <code>Function</code> 构造函数创建函数 <a class="header-anchor" href="#【强制】不要用-function-构造函数创建函数" aria-hidden="true">#</a></h3></li></ol><p>使用 <code>new Function</code> 创建函数会像 <code>eval()</code> 方法一样执行字符串，带来安全隐患</p><p>正例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sum </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>反例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sum </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Function</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">return a + b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li><h3 id="【强制】不要在块中使用函数声明。" tabindex="-1">【强制】不要在块中使用函数声明。 <a class="header-anchor" href="#【强制】不要在块中使用函数声明。" aria-hidden="true">#</a></h3></li></ol><p>在非函数块（如 <code>if、while</code> 等）中，不要使用函数声明：</p><p>正例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// good - 函数表达式可以清晰地说明函数能否在块外使用</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 不能在块外使用</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">test</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// =&gt; Uncaught ReferenceError: test is not defined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 能在块外使用</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> test</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">test</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// =&gt; test</span></span>
<span class="line"></span></code></pre></div><p>反例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bad - 函数声明不是块作用域而是函数作用域，因此在块外也能使用函数，容易引起误解</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// =&gt; test</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li><h3 id="【推荐】不要修改函数参数" tabindex="-1">【推荐】不要修改函数参数 <a class="header-anchor" href="#【推荐】不要修改函数参数" aria-hidden="true">#</a></h3></li></ol><p>不要修改引用类型的参数，这可能导致作为入参的原变量发生变化： 更不要给参数重新赋值，这可能导致意外的行为和内核优化问题：</p><p>示例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> f1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f1</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> originalObj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">f1</span><span style="color:#A6ACCD;">(originalObj)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(originalObj)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// =&gt; { key: 1 }</span></span>
<span class="line"></span></code></pre></div><ol start="4"><li><h3 id="【强制】generator-函数内必须有-yield-语句" tabindex="-1">【强制】<code>generator </code>函数内必须有 <code>yield</code> 语句 <a class="header-anchor" href="#【强制】generator-函数内必须有-yield-语句" aria-hidden="true">#</a></h3></li></ol><p>如果一个 <code>generator</code> 中没有 <code>yield</code> 语句，那么这个 <code>generator</code> 就不是必须的。</p><p>正例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>反例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-5-操作符" tabindex="-1">2.5 操作符 <a class="header-anchor" href="#_2-5-操作符" aria-hidden="true">#</a></h2><ol><li><h3 id="【推荐】使用严格相等运算符" tabindex="-1">【推荐】使用严格相等运算符 <a class="header-anchor" href="#【推荐】使用严格相等运算符" aria-hidden="true">#</a></h3></li></ol><p>非严格相等运算符（<code>==</code> 和 <code>!=</code>）会在比较前将被比较值转换为相同类型 �，对于不熟悉 JS 语言特性的人来说，这可能造成不小的隐患。了解更多</p><p>因此，一般情况下我们应该使用严格比较运算符（ <code>===</code> 和 <code>!==</code>）进行比较。� 如果要比较的两个值类型不同，应该显性地将其转换成相同类型再进行严格比较，而不是依赖于 <code>==</code> 和 <code>!=</code> 的隐式类型转换。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">83949</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// - 为了兼容 id 可能是字符串的情况，而有意使用 == 与数字比较</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (id </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">83949</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// do something</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> id </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">83949</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// - 如果 id 可能是字符串，应该先将其进行类型转换，再使用 === 进行比较</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#82AAFF;">Number</span><span style="color:#A6ACCD;">(id) </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">83949</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// do something</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li><h3 id="【强制】避免嵌套的三元表达式" tabindex="-1">【强制】避免嵌套的三元表达式 <a class="header-anchor" href="#【强制】避免嵌套的三元表达式" aria-hidden="true">#</a></h3></li></ol><p>嵌套的三元表达式会降低代码可读性。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// bad</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> baz </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> qux </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> quxx </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> bing </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> bam</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// good</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> qu </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> qux </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> quxx </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> bing </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> bam</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> bar </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> baz </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> qu</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-6-其他" tabindex="-1">2.6 其他 <a class="header-anchor" href="#_2-6-其他" aria-hidden="true">#</a></h2><ol><li><h3 id="【强制】禁止使用-eval" tabindex="-1">【强制】禁止使用 <code>eval</code> <a class="header-anchor" href="#【强制】禁止使用-eval" aria-hidden="true">#</a></h3></li></ol><p><code>eval</code> 语句存在安全风险，可能导致注入攻击。</p><hr><h1 id="附录" tabindex="-1">附录 <a class="header-anchor" href="#附录" aria-hidden="true">#</a></h1><h2 id="动词列表" tabindex="-1">动词列表 <a class="header-anchor" href="#动词列表" aria-hidden="true">#</a></h2><table><thead><tr><th>动词</th><th style="text-align:center;">释义</th></tr></thead><tbody><tr><td>get</td><td style="text-align:center;">获取/set 设置,</td></tr><tr><td>add</td><td style="text-align:center;">增加/remove 删除</td></tr><tr><td>create</td><td style="text-align:center;">创建/destory 移除</td></tr><tr><td>start</td><td style="text-align:center;">启动/stop 停止</td></tr><tr><td>open</td><td style="text-align:center;">打开/close 关闭,</td></tr><tr><td>read</td><td style="text-align:center;">读取/write 写入</td></tr><tr><td>load</td><td style="text-align:center;">载入/save 保存,</td></tr><tr><td>create</td><td style="text-align:center;">创建/destroy 销毁</td></tr><tr><td>begin</td><td style="text-align:center;">开始/end 结束,</td></tr><tr><td>backup</td><td style="text-align:center;">备份/restore 恢复</td></tr><tr><td>import</td><td style="text-align:center;">导入/export 导出,</td></tr><tr><td>split</td><td style="text-align:center;">分割/merge 合并</td></tr><tr><td>inject</td><td style="text-align:center;">注入/extract 提取,</td></tr><tr><td>attach</td><td style="text-align:center;">附着/detach 脱离</td></tr><tr><td>bind</td><td style="text-align:center;">绑定/separate 分离,</td></tr><tr><td>view</td><td style="text-align:center;">查看/browse 浏览</td></tr><tr><td>edit</td><td style="text-align:center;">编辑/modify 修改,</td></tr><tr><td>select</td><td style="text-align:center;">选取/mark 标记</td></tr><tr><td>copy</td><td style="text-align:center;">复制/paste 粘贴,</td></tr><tr><td>undo</td><td style="text-align:center;">撤销/redo 重做</td></tr><tr><td>insert</td><td style="text-align:center;">插入/delete 移除,</td></tr><tr><td>add</td><td style="text-align:center;">加入/append 添加</td></tr><tr><td>clean</td><td style="text-align:center;">清理/clear 清除,</td></tr><tr><td>index</td><td style="text-align:center;">索引/sort 排序</td></tr><tr><td>find</td><td style="text-align:center;">查找/search 搜索,</td></tr><tr><td>increase</td><td style="text-align:center;">增加/decrease 减少</td></tr><tr><td>play</td><td style="text-align:center;">播放/pause 暂停,</td></tr><tr><td>launch</td><td style="text-align:center;">启动/run 运行</td></tr><tr><td>compile</td><td style="text-align:center;">编译/execute 执行,</td></tr><tr><td>debug</td><td style="text-align:center;">调试/trace 跟踪</td></tr><tr><td>observe</td><td style="text-align:center;">观察/listen 监听,</td></tr><tr><td>build</td><td style="text-align:center;">构建/publish 发布</td></tr><tr><td>input</td><td style="text-align:center;">输入/output 输出,</td></tr><tr><td>encode</td><td style="text-align:center;">编码/decode 解码</td></tr><tr><td>encrypt</td><td style="text-align:center;">加密/decrypt 解密,</td></tr><tr><td>compress</td><td style="text-align:center;">压缩/decompress 解压缩</td></tr><tr><td>pack</td><td style="text-align:center;">打包/unpack 解包,</td></tr><tr><td>parse</td><td style="text-align:center;">解析/emit 生成</td></tr><tr><td>connect</td><td style="text-align:center;">连接/disconnect 断开,</td></tr><tr><td>send</td><td style="text-align:center;">发送/receive 接收</td></tr><tr><td>download</td><td style="text-align:center;">下载/upload 上传,</td></tr><tr><td>refresh</td><td style="text-align:center;">刷新/synchronize 同步</td></tr><tr><td>update</td><td style="text-align:center;">更新/revert 复原,</td></tr><tr><td>lock</td><td style="text-align:center;">锁定/unlock 解锁</td></tr><tr><td>check</td><td style="text-align:center;">out 签出/check in 签入,</td></tr><tr><td>submit</td><td style="text-align:center;">提交/commit 交付</td></tr><tr><td>push</td><td style="text-align:center;">推/pull 拉,</td></tr><tr><td>expand</td><td style="text-align:center;">展开/collapse 折叠</td></tr><tr><td>begin</td><td style="text-align:center;">起始/end 结束,</td></tr><tr><td>start</td><td style="text-align:center;">开始/finish 完成</td></tr><tr><td>enter</td><td style="text-align:center;">进入/exit 退出,</td></tr><tr><td>abort</td><td style="text-align:center;">放弃/quit 离开</td></tr><tr><td>obsolete</td><td style="text-align:center;">废弃/depreciate 废旧,</td></tr><tr><td>collect</td><td style="text-align:center;">收集/aggregate 聚集</td></tr></tbody></table>`,131),t=[o];function e(c,r,i,y,D,F){return a(),n("div",null,t)}const A=s(p,[["render",e]]);export{C as __pageData,A as default};
