import{_ as e,o,c as a,d}from"./app.432040ed.js";const _=JSON.parse('{"title":"通用命名规范","description":"","frontmatter":{},"headers":[],"relativePath":"docs/others/规范/前端规范/通用命名规范.md"}'),c={name:"docs/others/规范/前端规范/通用命名规范.md"},l=d('<h1 id="通用命名规范" tabindex="-1">通用命名规范 <a class="header-anchor" href="#通用命名规范" aria-hidden="true">#</a></h1><ol><li><h2 id="【强制】项目命名" tabindex="-1">【强制】项目命名 <a class="header-anchor" href="#【强制】项目命名" aria-hidden="true">#</a></h2><p>采用小写方式， 以中划线分隔，使用 <code>kebab-case</code> 命名。</p><p>部分操作系统（如 <strong>Windows, MacOS</strong>）下文件系统大小写不敏感，推荐使用 <code>-</code>连接</p><ul><li>正例：</li></ul><p><code>mall-management-system</code></p><ul><li>反例：</li></ul><p><code>mall_management-system / mallManagementSystem</code></p></li><li><h2 id="【强制】目录命名" tabindex="-1">【强制】目录命名 <a class="header-anchor" href="#【强制】目录命名" aria-hidden="true">#</a></h2><p>全部采用小写方式， 以<code>-</code>分隔，有复数结构时，要采用复数命名法， 缩写不用复数</p><ul><li>正例：</li></ul><p><code>scripts / styles / components / images / utils / layouts / demo-styles / demo-scripts / img / doc</code></p><ul><li>反例：</li></ul><p><code>script / style / demo_scripts / demoStyles / imgs / docs</code></p><p>【特殊】VUE 的项目中的 components 中的组件目录，使用 kebab-case 命名</p><ul><li>正例：</li></ul><p><code>head-search / page-loading / authorized / notice-icon</code></p><ul><li>反例：</li></ul><p><code>HeadSearch / PageLoading</code></p><p>【特殊】VUE 的项目中的除 components 组件目录外的所有目录也使用 <code>kebab-case</code> 命名</p><ul><li>正例：</li></ul><p><code>page-one / shopping-car / user-management</code></p><ul><li>反例：</li></ul><p><code>ShoppingCar / UserManagement</code></p></li><li><h2 id="【强制】文件命名" tabindex="-1">【强制】文件命名 <a class="header-anchor" href="#【强制】文件命名" aria-hidden="true">#</a></h2><p><code>js、css、html、img、scss、less</code>全部采用小写方式， 使用 <code>kebab-case</code> 命名</p><ul><li>正例：</li></ul><p><code>render-dom.js / signup.css / index.html / company-logo.png</code></p><ul><li>反例：</li></ul><p><code>renderDom.js / UserManagement.html</code></p></li><li><h2 id="【推荐】命名严谨性" tabindex="-1">【推荐】命名严谨性 <a class="header-anchor" href="#【推荐】命名严谨性" aria-hidden="true">#</a></h2><p>代码中的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。</p><p>说明：正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音命名方式也要避免采用</p><ul><li><p>正例：<code>henan / luoyang / rmb</code> 等国际通用的名称，可视同英文。</p></li><li><p>反例：<code>DaZhePromotion [打折] / getPingfenByName() [评分] / int 某变量 = 3</code></p></li></ul><p>命名需要语义化，杜绝完全不规范的缩写，避免望文不知义：</p><ul><li>反例：</li></ul><p><code>AbstractClass</code>“缩写”命名成 <code>AbsClass</code></p><p><code>condition</code> “缩写”命名成 <code>condi</code>，此类随意缩写严重降低了代码的可阅读性。</p></li></ol>',2),s=[l];function i(t,n,p,r,h,m){return o(),a("div",null,s)}const g=e(c,[["render",i]]);export{_ as __pageData,g as default};
