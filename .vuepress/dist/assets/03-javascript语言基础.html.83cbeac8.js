import{_ as n,o as s,c as a,e as t}from"./app.208d3657.js";const o={},p=t(`<h1 id="语言基础" tabindex="-1"><a class="header-anchor" href="#语言基础" aria-hidden="true">#</a> 语言基础</h1><h2 id="js6种原始数据类型" tabindex="-1"><a class="header-anchor" href="#js6种原始数据类型" aria-hidden="true">#</a> js6种原始数据类型</h2><ol><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li><li>Symbol</li></ol><h2 id="typeof-操作符" tabindex="-1"><a class="header-anchor" href="#typeof-操作符" aria-hidden="true">#</a> typeof 操作符</h2><blockquote><p>typeof对值类型的判断返回值，7种</p></blockquote><ol><li>undefined 未定义</li><li>boolean 布尔值</li><li>string 字符串</li><li>number 数字</li><li>function 函数</li><li>symbol 符号</li><li>object 对象（null值返回也是这个）</li></ol><blockquote><p>typeof 一个未声明的变量 返回: undefined</p></blockquote><h2 id="undefined类型" tabindex="-1"><a class="header-anchor" href="#undefined类型" aria-hidden="true">#</a> Undefined类型</h2><blockquote><p>值未初始化，默认值为undefined</p></blockquote><h2 id="null类型" tabindex="-1"><a class="header-anchor" href="#null类型" aria-hidden="true">#</a> Null类型</h2><blockquote><p>null表示空对象指针，所以typeof null。返回object<br> null是一个假值，<code>Boolean(null); // false</code><br> undefined值由null值派生而来，所以</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="boolean类型-布尔值-两个值true-false" tabindex="-1"><a class="header-anchor" href="#boolean类型-布尔值-两个值true-false" aria-hidden="true">#</a> Boolean类型（布尔值，两个值true | false）</h2><blockquote><p>true 不等于 1 ; false 不等于 0</p></blockquote><h2 id="number类型-数字类型" tabindex="-1"><a class="header-anchor" href="#number类型-数字类型" aria-hidden="true">#</a> Number类型（数字类型）</h2><blockquote><p>整数的表示，使用没有小数点的数字声明<br> 小数为双精度数字，浮点精度最高小数点后17位<br> 特殊的数值 NaN (not a number), 表示不是数字，NaN 不等于 NaN</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;0000112&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 112</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;true&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>isNaN方法判断时，会做隐式的类型转换</p></blockquote><h2 id="string类型-字符串" tabindex="-1"><a class="header-anchor" href="#string类型-字符串" aria-hidden="true">#</a> String类型（字符串）</h2><blockquote><p>toString()方法可用于将数字转换进制</p></blockquote><h2 id="symbol类型-符号" tabindex="-1"><a class="header-anchor" href="#symbol类型-符号" aria-hidden="true">#</a> Symbol类型（符号）</h2><blockquote><p>初始化需要用Symbol()函数初始化<br> 对象object可用Symbol类型的值作为键值</p></blockquote><h2 id="object类型-对象" tabindex="-1"><a class="header-anchor" href="#object类型-对象" aria-hidden="true">#</a> Object类型（对象）</h2><blockquote><p>一组数据和功能的集合<br> 使用 new 关键词创建</p></blockquote><h3 id="每个object对象都有的属性和方法" tabindex="-1"><a class="header-anchor" href="#每个object对象都有的属性和方法" aria-hidden="true">#</a> 每个Object对象都有的属性和方法</h3><ol><li>constructor: （属性） 当前对象的创建函数</li><li>hasOwnProperty(propertyName): (方法) 判断参数propertyName是否为该对象的属性</li><li>isPrototypeof(object): (方法) 判断当前对象是否为传入的参数对象的原型</li><li>propertyIsEnumerable(propertyName): (方法) 判断传入的属性在该对象中是否可用</li><li>toLocaleString(): (方法) 返回对象的字符串表示，类似于object.toString()</li><li>toString(): (方法) 返回对象的字符串表示</li><li>valueOf(): (方法) 返回对象对应的字符串、数字或布尔值表示，通常与toString()一致</li></ol><h2 id="function类型-函数" tabindex="-1"><a class="header-anchor" href="#function类型-函数" aria-hidden="true">#</a> Function类型（函数）</h2><blockquote><p>默认返回值undefined</p></blockquote>`,28),e=[p];function c(l,u){return s(),a("div",null,e)}const k=n(o,[["render",c],["__file","03-javascript语言基础.html.vue"]]);export{k as default};
