import{_ as a,c as i,o as e,a3 as l}from"./chunks/framework.ymtTkBEb.js";const k=JSON.parse('{"title":"迭代器与生成器","description":"","frontmatter":{},"headers":[],"relativePath":"docs/javascript/books/javascript高级程序设计/07-迭代器与生成器.md","filePath":"docs/javascript/books/javascript高级程序设计/07-迭代器与生成器.md"}'),s={name:"docs/javascript/books/javascript高级程序设计/07-迭代器与生成器.md"},t=l(`<h1 id="迭代器与生成器" tabindex="-1">迭代器与生成器 <a class="header-anchor" href="#迭代器与生成器" aria-label="Permalink to &quot;迭代器与生成器&quot;">​</a></h1><h2 id="迭代器" tabindex="-1">迭代器 <a class="header-anchor" href="#迭代器" aria-label="Permalink to &quot;迭代器&quot;">​</a></h2><p>迭代会在一个有序集合上进行</p><p>迭代器模式（特别是在 ECMAScript 这个语境下）描述了一个方案，即可以把有些结构称为“可迭代对象”（iterable），</p><p>内置类型都实现了 Iterable 接口：</p><ul><li>字符串</li><li>数组</li><li>映射</li><li>集合</li><li>arguments 对象</li><li>NodeList 等 DOM 集合类型</li></ul><p>接收可迭代对象的原生语言特性包括：</p><ul><li>for-of 循环</li><li>数组解构</li><li>扩展操作符</li><li>Array.from()</li><li>创建集合</li><li>创建映射</li><li>Promise.all()接收由期约组成的可迭代对象</li><li>Promise.race()接收由期约组成的可迭代对象</li><li>yield*操作符，在生成器中使用</li></ul><h2 id="生成器" tabindex="-1">生成器 <a class="header-anchor" href="#生成器" aria-label="Permalink to &quot;生成器&quot;">​</a></h2><p>生成器是 ECMAScript 6 新增的一个极为灵活的结构，拥有在一个函数块内暂停和恢复代码执行的能力</p><p>生成器的形式是一个函数，函数名称前面加一个星号（*）表示它是一个生成器</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生成器函数声明</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generatorFn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre></div><blockquote><p>注意: 箭头函数不能用来定义生成器函数</p></blockquote><p>调用生成器函数会产生一个生成器对象。生成器对象一开始处于暂停执行（suspended）的状态</p><h3 id="yield-关键字" tabindex="-1">yield 关键字 <a class="header-anchor" href="#yield-关键字" aria-label="Permalink to &quot;yield 关键字&quot;">​</a></h3><p>可以让生成器停止和开始执行</p>`,16),o=[t];function r(p,n,c,d,h,_){return e(),i("div",null,o)}const b=a(s,[["render",r]]);export{k as __pageData,b as default};
