import{_ as s,c as i,o as a,a3 as e}from"./chunks/framework.ymtTkBEb.js";const g=JSON.parse('{"title":"期约与异步函数","description":"","frontmatter":{},"headers":[],"relativePath":"docs/javascript/books/javascript高级程序设计/11-期约与异步函数.md","filePath":"docs/javascript/books/javascript高级程序设计/11-期约与异步函数.md"}'),t={name:"docs/javascript/books/javascript高级程序设计/11-期约与异步函数.md"},n=e(`<h1 id="期约与异步函数" tabindex="-1">期约与异步函数 <a class="header-anchor" href="#期约与异步函数" aria-label="Permalink to &quot;期约与异步函数&quot;">​</a></h1><h2 id="期约" tabindex="-1">期约 <a class="header-anchor" href="#期约" aria-label="Permalink to &quot;期约&quot;">​</a></h2><p>早期JS异步任务，通常使用回调函数的方式实现，面对需要深度嵌套的回调函数（俗称“回调地狱”），会导致难以理解</p><p>期约（promise）还使用了“终局”（eventual）、“期许”（future）、“延迟”（delay）和“迟付”（deferred）等术语指代同样的概念</p><p>ECMAScript 6 增加了对 Promises/A+规范的完善支持，即 Promise 类型</p><p>使用 <code>Promise</code> 类型定义</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="期约状态机" tabindex="-1">期约状态机 <a class="header-anchor" href="#期约状态机" aria-label="Permalink to &quot;期约状态机&quot;">​</a></h3><ul><li>待定 (pending)，是期约的最初始状态</li><li>兑现 (fulfilled)，有时候也称为“解决”，resolved</li><li>拒绝 (rejected)</li></ul><h3 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h3><ol><li><code>Promise.prototype.then()</code>, 两个参数：onResolved 处理程序和 onRejected 处理程序</li><li><code>Promise.prototype.catch()</code>, 一个参数：onRejected 处理程序</li><li><code>Promise.prototype.finally()</code>，一个参数onFinally 处理程序，这个处理程序在期约转换为<strong>解决</strong>或<strong>拒绝</strong>状态时都会执行</li></ol><h3 id="期约连锁与期约合成" tabindex="-1">期约连锁与期约合成 <a class="header-anchor" href="#期约连锁与期约合成" aria-label="Permalink to &quot;期约连锁与期约合成&quot;">​</a></h3><p>每个期约实例的方法（then()、catch()和 finally()）都会返回一个新的期约对象，而这个新期约又有自己的实例方法。这样连缀方法调用就可以构成所谓的“<strong>期约连锁</strong>”</p><p><code>Promise.all()</code>和 <code>Promise.race()</code></p><p><code>Promise.all()</code> s静态方法创建的期约会在一组期约全部解决之后再解决。 <code>Promise.race()</code> 静态方法返回一个包装期约，是一组集合中最先解决或拒绝的期约的镜像。</p><h2 id="异步函数" tabindex="-1">异步函数 <a class="header-anchor" href="#异步函数" aria-label="Permalink to &quot;异步函数&quot;">​</a></h2><p>异步函数，也称为“async/await”（语法关键字），是 ES6 期约模式在 ECMAScript 函数中的应用。async/await 是 ES8 规范新增的。</p><p><code>async</code> 关键字用于声明异步函数。这个关键字可以用在函数声明、函数表达式、箭头函数和方法上</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {} </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span></code></pre></div><p><code>await</code>关键字可以暂停异步函数代码的执行，等待期约解决。因为异步函数主要针对不会马上完成的任务，所以自然需要一种暂停和恢复执行的能力。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // await 会等待promise期约resolved后再执行下一程序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolve, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;baz&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div>`,21),l=[n];function h(p,k,r,o,d,c){return a(),i("div",null,l)}const y=s(t,[["render",h]]);export{g as __pageData,y as default};
