import{_ as i,c as s,o as a,a3 as t}from"./chunks/framework.ymtTkBEb.js";const u=JSON.parse('{"title":"DOM扩展","description":"","frontmatter":{},"headers":[],"relativePath":"docs/javascript/books/javascript高级程序设计/15-DOM扩展.md","filePath":"docs/javascript/books/javascript高级程序设计/15-DOM扩展.md"}'),e={name:"docs/javascript/books/javascript高级程序设计/15-DOM扩展.md"},l=t(`<h1 id="dom扩展" tabindex="-1">DOM扩展 <a class="header-anchor" href="#dom扩展" aria-label="Permalink to &quot;DOM扩展&quot;">​</a></h1><h2 id="选择器api" tabindex="-1">选择器API <a class="header-anchor" href="#选择器api" aria-label="Permalink to &quot;选择器API&quot;">​</a></h2><ul><li><code>querySelector(CSS选择符) </code> 返回匹配该模式的第一个后代元素</li><li><code>querySelectorAll(CSS选择符)</code> 返回所有匹配的节点</li><li><code>matches(CSS选择符)</code> 元素匹配则该选择符返回 true，否则返回 false</li></ul><h2 id="元素遍历" tabindex="-1">元素遍历 <a class="header-anchor" href="#元素遍历" aria-label="Permalink to &quot;元素遍历&quot;">​</a></h2><ul><li><code>childElementCount</code>，返回子元素数量（不包含文本节点和注释）；</li><li><code>firstElementChild</code>，指向第一个 Element 类型的子元素（Element 版 firstChild）；</li><li><code>lastElementChild</code>，指向最后一个 Element 类型的子元素（Element 版 lastChild）；</li><li><code>previousElementSibling</code> ，指向前一个 Element 类型的同胞元素（ Element 版previousSibling）；</li><li><code>nextElementSibling</code>，指向后一个 Element 类型的同胞元素（Element 版 nextSibling）。</li></ul><h2 id="css扩展" tabindex="-1">CSS扩展 <a class="header-anchor" href="#css扩展" aria-label="Permalink to &quot;CSS扩展&quot;">​</a></h2><ul><li><code>getElementsByClassName()</code> 通过类名获取节点</li><li><code>dom.classList</code> 返回类名列表，DOMTokenList实例 <ol><li>add(value)，向类名列表中添加指定的字符串值 value。如果这个值已经存在，则什么也不做。</li><li>contains(value)，返回布尔值，表示给定的 value 是否存在。</li><li>remove(value)，从类名列表中删除指定的字符串值 value。</li><li>toggle(value)，如果类名列表中已经存在指定的 value，则删除；如果不存在，则添加。</li></ol></li></ul><h2 id="htmldocument-扩展" tabindex="-1">HTMLDocument 扩展 <a class="header-anchor" href="#htmldocument-扩展" aria-label="Permalink to &quot;HTMLDocument 扩展&quot;">​</a></h2><ul><li><code>document.readyState</code> 文档加载状态 loading，表示文档正在加载；complete，表示文档加载完成。</li><li><code>document.compatMode</code> 文档渲染模式 CSS1Compat，标准模式；BackCompat，混杂模式</li><li><code>document.head</code> 文档<code>&lt;dead&gt;</code>引用</li><li><code>document.characterSet</code> 文档字符集</li></ul><h2 id="自定义数据属性" tabindex="-1">自定义数据属性 <a class="header-anchor" href="#自定义数据属性" aria-label="Permalink to &quot;自定义数据属性&quot;">​</a></h2><p>使用 <code>data-attrName=&quot;value&quot;</code>定义</p><p>可以使用 <code>document.dataset.attrName</code> 获取自定义属性值</p><blockquote><p>注意：attrName在html标签中使用短横线，在获取时需使用小驼峰名</p></blockquote><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myDiv&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-appId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;12345&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> data-myname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Nicholas&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 本例中使用的方法仅用于示范</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myDiv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 取得自定义数据属性的值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div.dataset.appId; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> div.dataset.myname; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置自定义数据属性的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.dataset.appId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23456</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div.dataset.myname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Michael&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 有&quot;myname&quot;吗？</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (div.dataset.myname){ </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Hello, \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="插入标记innerhtml-outerhtml" tabindex="-1">插入标记innerHTML&amp;outerHTML <a class="header-anchor" href="#插入标记innerhtml-outerhtml" aria-label="Permalink to &quot;插入标记innerHTML&amp;outerHTML&quot;">​</a></h2><ol><li>innerHTML</li></ol><p>innerHTML根据提供的字符串值以新的 DOM 子树替代元素中原来包含的所有节点</p><p>所有现代浏览器中，通过 innerHTML 插入的<code>&lt;script&gt;</code>标签是不会执行的</p><ol start="2"><li>outerHTML</li></ol><p>写入outerHTML 属性时，调用它的元素会被传入的 HTML字符串经解释之后生成的 DOM 子树取代</p><h2 id="专有扩展" tabindex="-1">专有扩展 <a class="header-anchor" href="#专有扩展" aria-label="Permalink to &quot;专有扩展&quot;">​</a></h2><h3 id="contains-方法" tabindex="-1">contains()方法 <a class="header-anchor" href="#contains-方法" aria-label="Permalink to &quot;contains()方法&quot;">​</a></h3><p>目标节点是被搜索节点的后代，contains()返回 true</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.documentElement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div>`,25),n=[l];function h(p,d,k,o,r,c){return a(),s("div",null,n)}const g=i(e,[["render",h]]);export{u as __pageData,g as default};
