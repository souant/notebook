import{_ as e,c as o,o as a,a3 as l}from"./chunks/framework.ymtTkBEb.js";const x=JSON.parse('{"title":"正则表达式","description":"","frontmatter":{},"headers":[],"relativePath":"docs/javascript/regex/index.md","filePath":"docs/javascript/regex/index.md"}'),i={name:"docs/javascript/regex/index.md"},c=l('<h1 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h1><p>正则表达式，即 Regular Expressions，缩写为 Regex 或 Regexp，是在正则表达式语法框架内创建的字符串。您可以用正则表达式轻松管理数据，执行查找、匹配或编辑等命令。正则表达式适用于 Python、SQL、JavaScript、R、Google Analytics、Google Data Studio 等编程语言和整个编程过程</p><p><a href="https://regexlearn.com/zh-cn/learn" target="_blank" rel="noreferrer">RegexLearn</a></p><h2 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-label="Permalink to &quot;标识符&quot;">​</a></h2><ul><li><code>i</code> 忽略大小写</li><li><code>g</code> 全局匹配</li><li><code>m</code> 多行匹配</li></ul><h2 id="锚点" tabindex="-1">锚点 <a class="header-anchor" href="#锚点" aria-label="Permalink to &quot;锚点&quot;">​</a></h2><ul><li><code>^</code> 字符串或行的开头</li><li><code>$</code> 字符串或行的结尾</li><li><code>\\b</code> 单词边界</li><li><code>\\B</code> 非单词边界</li></ul><h2 id="字符类" tabindex="-1">字符类 <a class="header-anchor" href="#字符类" aria-label="Permalink to &quot;字符类&quot;">​</a></h2><ul><li><code>[abc]</code> 字符集，表示有a、b、c的</li><li><code>[^abc]</code> 否定字符集，表示没有a、b、c的</li><li><code>[a-z]</code> 范围，表示从a到z的小写字母</li><li><code>.</code> 点，表示任意字符</li><li><code>\\w</code> 单词，表示字母、数字、下划线</li><li><code>\\W</code> 非单词，表示非字母、数字、下划线</li><li><code>\\d</code> 数字，表示0-9的数字</li><li><code>\\D</code> 非数字</li><li><code>\\s</code> 空白符，表示空格</li><li><code>\\S</code> 非空白符</li></ul><h2 id="两次与分支" tabindex="-1">两次与分支 <a class="header-anchor" href="#两次与分支" aria-label="Permalink to &quot;两次与分支&quot;">​</a></h2><ul><li><code>+</code> 加号，表示一次或多次，1-n次</li><li><code>*</code> 星号，表示任意次，0-n次</li><li><code>{1, 3}</code> 重复次数，1-3次</li><li><code>?</code> 可选号，0次或1次</li><li><code>|</code> 分支，表示或的逻辑</li></ul><h2 id="组和引用" tabindex="-1">组和引用 <a class="header-anchor" href="#组和引用" aria-label="Permalink to &quot;组和引用&quot;">​</a></h2><ul><li><code>()</code> 表示组，会将括号内的匹配定义为一个组</li><li><code>\\1</code> 表示组的引用, 按照组的顺序和层级标识</li><li><code>(?:)</code> 非捕获组，创建无法引用的分组</li></ul><h2 id="零宽断言" tabindex="-1">零宽断言 <a class="header-anchor" href="#零宽断言" aria-label="Permalink to &quot;零宽断言&quot;">​</a></h2><ul><li><code>(?=)</code> 正向先行断言</li><li><code>(?!)</code> 负向先行断言</li><li><code>(?&lt;=)</code> 正向后行断言</li><li><code>(?&lt;!)</code> 负向后行断言</li></ul>',15),d=[c];function r(t,n,s,h,u,_){return a(),o("div",null,d)}const b=e(i,[["render",r]]);export{x as __pageData,b as default};
