import{_ as e,c as l,o,a3 as i}from"./chunks/framework.ymtTkBEb.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/javascript/webpack/常用的loader与plugin.md","filePath":"docs/javascript/webpack/常用的loader与plugin.md"}'),c={name:"docs/javascript/webpack/常用的loader与plugin.md"},p=i('<h2 id="常用的loader" tabindex="-1">常用的loader <a class="header-anchor" href="#常用的loader" aria-label="Permalink to &quot;常用的loader&quot;">​</a></h2><ul><li><p><code>sass-loader</code>：将SCSS/SASS代码转换成CSS</p></li><li><p><code>postcss-loader</code>：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀，加上兼容的浏览器厂商前缀</p></li><li><p><code>css-loader</code>：处理样式之间互相引用的逻辑, 加载 CSS，支持模块化、压缩、文件导入等特性</p></li><li><p><code>style-loader</code>：将 css-loader 解析后的内容挂载到 html 页面当中</p></li><li><p><code>file-loader</code>：可以指定要复制和放置资源文件的位置，以及使用版本哈希命名以获得更好的缓存，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)。</p></li><li><p><code>url-loader</code>：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码，减少HTTP请求</p></li><li><p><code>image-loader</code>：加载并且压缩图片文件</p></li><li><p><code>source-map-loader</code>：加载额外的 Source Map 文件，以方便断点调试</p></li><li><p><code>json-loader</code>: 加载 JSON 文件（默认包含）</p></li><li><p><code>babel-loader</code>：把 ES6 转换成 ES5</p></li><li><p><code>ts-loader</code>: 将 TypeScript 转换成 JavaScript</p></li><li><p><code>tslint-loader</code>：通过 TSLint检查 TypeScript 代码</p></li><li><p><code>eslint-loader</code>：通过 ESLint 检查 JavaScript 代码</p></li><li><p><code>mocha-loader</code>：加载 Mocha 测试用例的代码</p></li><li><p><code>coverjs-loader</code>：计算测试的覆盖率</p></li><li><p><code>vue-loader</code>：将 Vue 组件转换为 JavaScript 模块</p></li><li><p><code>i18n-loader</code>: 国际化</p></li><li><p><code>awesome-typescript-loader</code>：将 TypeScript 转换成 JavaScript，性能优于 ts-loader</p></li></ul><h2 id="常用的plugin" tabindex="-1">常用的plugin <a class="header-anchor" href="#常用的plugin" aria-label="Permalink to &quot;常用的plugin&quot;">​</a></h2><ul><li><p><code>html-webpack-plugin</code>：在 dist 下生成 html 文件。简化 HTML 文件创建 (依赖于 html-loader)</p></li><li><p><code>clean-webpack-plugin</code>: 目录清理。把 dist 删除再生成打包结果</p></li><li><p><code>copy-webpack-plugin</code>: 因为 public 文件下的资源是固定的，直接拷贝到编译后的文件夹引入使用就可以，例如 favicon.ico</p></li><li><p><code>open-browser-webpack-plugin</code>: 启动webpack之后，自动打开浏览器</p></li><li><p><code>mini-css-extract-plugin</code>: 分离样式文件，CSS 提取为独立文件，支持按需加载</p></li><li><p><code>webpack-parallel-uglify-plugin</code>: 多进程执行代码压缩，提升构建速度</p></li><li><p><code>HappyPack Plugin</code>: 开启多进程打包，提升打包速度</p></li><li><p><code>webpack-bundle-analyzer</code>: 可视化 Webpack 输出文件的体积 (业务组件、依赖第三方模块)</p></li><li><p><code>Dllplugin</code>: 动态链接库，将项目中依赖的三方模块抽离出来，单独打包</p></li><li><p><code>DllReferencePlugin</code>: 配合 Dllplugin，通过 manifest.json 映射到相关的依赖上去</p></li><li><p><code>vue-skeleton-webpack-plugin</code>: vue 项目实现骨架屏</p></li></ul>',4),a=[p];function d(r,t,s,n,u,S){return o(),l("div",null,a)}const g=e(c,[["render",d]]);export{b as __pageData,g as default};
