import{_ as t,c as e,o as a,a3 as o}from"./chunks/framework.ymtTkBEb.js";const l="/notebook/assets/01.DED_NbSB.png",u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/others/网络/HTTP协议.md","filePath":"docs/others/网络/HTTP协议.md"}'),i={name:"docs/others/网络/HTTP协议.md"},h=o('<h2 id="http-超文本传输协议" tabindex="-1">HTTP ( 超文本传输协议 ) <a class="header-anchor" href="#http-超文本传输协议" aria-label="Permalink to &quot;HTTP ( 超文本传输协议 )&quot;">​</a></h2><p><img src="'+l+'" alt="http协议"></p><h3 id="http请求" tabindex="-1">HTTP请求 <a class="header-anchor" href="#http请求" aria-label="Permalink to &quot;HTTP请求&quot;">​</a></h3><ol><li>起始行（请求方法、请求path、协议版本）</li><li>请求标头</li><li>空行</li><li>请求主体</li></ol><h3 id="http响应" tabindex="-1">HTTP响应 <a class="header-anchor" href="#http响应" aria-label="Permalink to &quot;HTTP响应&quot;">​</a></h3><ol><li>状态行（协议版本、状态码、状态文本）</li><li>响应标头</li><li>空行</li><li>响应主体</li></ol><h2 id="版本" tabindex="-1">版本 <a class="header-anchor" href="#版本" aria-label="Permalink to &quot;版本&quot;">​</a></h2><h3 id="http0-9" tabindex="-1">http0.9 <a class="header-anchor" href="#http0-9" aria-label="Permalink to &quot;http0.9&quot;">​</a></h3><p>http0.9是一个古老的版本。目前没有再使用的</p><ol><li>只支持<code>GET</code>请求</li><li>没有<code>header</code>，只有 HTML 文件可以传送，无法传输其他类型的文件</li><li>完成后关闭tcp连接</li></ol><h3 id="http1-0" tabindex="-1">http1.0 <a class="header-anchor" href="#http1-0" aria-label="Permalink to &quot;http1.0&quot;">​</a></h3><ol><li>增加了<code>POST</code>、<code>put</code>、<code>DELETE</code>、<code>HEADER</code> 等请求方式</li><li>增加了请求头与响应头，以及其他的一些元信息 (比如: 状态码、权限、缓存、内容编码)</li><li>扩展了传输内容以及格式，<code>Content-Type</code></li><li>缓存处理：expire</li></ol><p>缺点： 完成响应后，tcp连接断开，需要加载的资源多了性能比较差</p><h3 id="http1-1" tabindex="-1">http1.1 <a class="header-anchor" href="#http1-1" aria-label="Permalink to &quot;http1.1&quot;">​</a></h3><p>HTTP 1.1默认保持长连接，数据传输完成保持tcp连接不断开,继续用这个通道传输数据</p><ol><li>长连接：可以设置<code>connection</code>字段设置<code>kepp-alive</code>保持连接不断开</li><li>缓存处理：新增字段<code>cache-control</code></li><li>断点传输</li><li>管道机制：同一个 TCP 连接里，允许多个请求同时发送，增加了并发性</li></ol><h3 id="http2-0" tabindex="-1">http2.0 <a class="header-anchor" href="#http2-0" aria-label="Permalink to &quot;http2.0&quot;">​</a></h3><ol><li>二进制分帧</li><li>多路复用：在共享TCP链接的基础上同时发送请求和响应</li><li>头部压缩： 合并同时发出请求的相同部分</li><li>服务器推送： 服务器可以额外的向客户端推送资源，而无需客户端明确的请求</li></ol><h3 id="http3-0" tabindex="-1">http3.0 <a class="header-anchor" href="#http3-0" aria-label="Permalink to &quot;http3.0&quot;">​</a></h3><p>HTTP 的下一个主要版本，HTTP/3 有这与 HTTP 早期版本的相同语义，但在传输层部分使用 QUIC (en-US)</p><p>参考：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP" target="_blank" rel="noreferrer">http版本</a></p>',22),r=[h];function c(p,d,n,s,T,_){return a(),e("div",null,r)}const b=t(i,[["render",c]]);export{u as __pageData,b as default};
